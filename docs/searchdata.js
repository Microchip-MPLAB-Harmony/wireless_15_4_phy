var SearchFiles = ["GUID-2FA30643-0C6E-4013-A926-F3C85434C151.html","GUID-487BEFD8-44AB-4030-91BE-37DB2F78FEE4.html","GUID-DB8DD8D7-95F0-4EBD-8337-60439A644BFC.html","GUID-277B6BBE-6949-4DA1-A890-EDBFADF506B5.html","GUID-F4FA574C-47D3-4F48-A4C4-60C3F07FFD1C.html","GUID-A77BAB4D-6891-48E9-86AB-504CB1C72DE5.html","GUID-A14A49DA-BAC9-496D-A6E4-FDEA10D23D15.html","GUID-6FC895D2-8A07-4C76-BAB7-8A74DA034A0F.html",
							"GUID-6FC895D2-8A07-4C76-BAB7-8A74DA034A0F.html",
							"GUID-6FC895D2-8A07-4C76-BAB7-8A74DA034A0F.html",
							"GUID-6FC895D2-8A07-4C76-BAB7-8A74DA034A0F.html",
							"GUID-6FC895D2-8A07-4C76-BAB7-8A74DA034A0F.html",
							"GUID-6FC895D2-8A07-4C76-BAB7-8A74DA034A0F.html",
							"GUID-6FC895D2-8A07-4C76-BAB7-8A74DA034A0F.html",
							"GUID-6FC895D2-8A07-4C76-BAB7-8A74DA034A0F.html",
							"GUID-6FC895D2-8A07-4C76-BAB7-8A74DA034A0F.html",
							"GUID-B1BD8A66-69CF-4F3A-BF6D-1CDCD849E2B5.html",
							"GUID-B1BD8A66-69CF-4F3A-BF6D-1CDCD849E2B5.html",
							"GUID-B1BD8A66-69CF-4F3A-BF6D-1CDCD849E2B5.html",
							"GUID-B1BD8A66-69CF-4F3A-BF6D-1CDCD849E2B5.html",
							"GUID-B1BD8A66-69CF-4F3A-BF6D-1CDCD849E2B5.html",
							"GUID-B1BD8A66-69CF-4F3A-BF6D-1CDCD849E2B5.html",
							"GUID-B1BD8A66-69CF-4F3A-BF6D-1CDCD849E2B5.html",
							"GUID-B1BD8A66-69CF-4F3A-BF6D-1CDCD849E2B5.html",
							"GUID-B1BD8A66-69CF-4F3A-BF6D-1CDCD849E2B5.html",
							"GUID-7916B08D-82DE-4DA8-80A2-ECB4C94538DE.html",
							"GUID-7916B08D-82DE-4DA8-80A2-ECB4C94538DE.html",
							"GUID-7916B08D-82DE-4DA8-80A2-ECB4C94538DE.html",
							"GUID-7916B08D-82DE-4DA8-80A2-ECB4C94538DE.html",
							"GUID-7916B08D-82DE-4DA8-80A2-ECB4C94538DE.html",
							"GUID-7916B08D-82DE-4DA8-80A2-ECB4C94538DE.html",
							"GUID-7916B08D-82DE-4DA8-80A2-ECB4C94538DE.html",
							"GUID-7916B08D-82DE-4DA8-80A2-ECB4C94538DE.html",
							"GUID-7916B08D-82DE-4DA8-80A2-ECB4C94538DE.html",
							"GUID-DF01558D-3BF2-494C-8306-BBD35FA1577A.html",
							"GUID-DF01558D-3BF2-494C-8306-BBD35FA1577A.html",
							"GUID-DF01558D-3BF2-494C-8306-BBD35FA1577A.html",
							"GUID-DF01558D-3BF2-494C-8306-BBD35FA1577A.html",
							"GUID-DF01558D-3BF2-494C-8306-BBD35FA1577A.html",
							"GUID-DF01558D-3BF2-494C-8306-BBD35FA1577A.html",
							"GUID-DF01558D-3BF2-494C-8306-BBD35FA1577A.html",
							"GUID-DF01558D-3BF2-494C-8306-BBD35FA1577A.html",
							"GUID-DF01558D-3BF2-494C-8306-BBD35FA1577A.html",
							"GUID-20C08821-E3B7-4092-ABD4-D099A80E590A.html",
							"GUID-20C08821-E3B7-4092-ABD4-D099A80E590A.html",
							"GUID-20C08821-E3B7-4092-ABD4-D099A80E590A.html",
							"GUID-20C08821-E3B7-4092-ABD4-D099A80E590A.html",
							"GUID-20C08821-E3B7-4092-ABD4-D099A80E590A.html",
							"GUID-20C08821-E3B7-4092-ABD4-D099A80E590A.html",
							"GUID-20C08821-E3B7-4092-ABD4-D099A80E590A.html",
							"GUID-20C08821-E3B7-4092-ABD4-D099A80E590A.html",
							"GUID-20C08821-E3B7-4092-ABD4-D099A80E590A.html",
							"GUID-EB2DE23D-99BE-4710-BDF2-40E1408A2B7F.html",
							"GUID-EB2DE23D-99BE-4710-BDF2-40E1408A2B7F.html",
							"GUID-EB2DE23D-99BE-4710-BDF2-40E1408A2B7F.html",
							"GUID-EB2DE23D-99BE-4710-BDF2-40E1408A2B7F.html",
							"GUID-EB2DE23D-99BE-4710-BDF2-40E1408A2B7F.html",
							"GUID-EB2DE23D-99BE-4710-BDF2-40E1408A2B7F.html",
							"GUID-EB2DE23D-99BE-4710-BDF2-40E1408A2B7F.html",
							"GUID-EB2DE23D-99BE-4710-BDF2-40E1408A2B7F.html",
							"GUID-EB2DE23D-99BE-4710-BDF2-40E1408A2B7F.html",
							"GUID-6E396564-56E8-487F-A8A7-0E399153C328.html",
							"GUID-6E396564-56E8-487F-A8A7-0E399153C328.html",
							"GUID-6E396564-56E8-487F-A8A7-0E399153C328.html",
							"GUID-6E396564-56E8-487F-A8A7-0E399153C328.html",
							"GUID-6E396564-56E8-487F-A8A7-0E399153C328.html",
							"GUID-6E396564-56E8-487F-A8A7-0E399153C328.html",
							"GUID-6E396564-56E8-487F-A8A7-0E399153C328.html",
							"GUID-6E396564-56E8-487F-A8A7-0E399153C328.html",
							"GUID-6E396564-56E8-487F-A8A7-0E399153C328.html",
							"GUID-C5454330-0318-45B2-9A9B-C8E70ECA1CBE.html",
							"GUID-C5454330-0318-45B2-9A9B-C8E70ECA1CBE.html",
							"GUID-C5454330-0318-45B2-9A9B-C8E70ECA1CBE.html",
							"GUID-C5454330-0318-45B2-9A9B-C8E70ECA1CBE.html",
							"GUID-C5454330-0318-45B2-9A9B-C8E70ECA1CBE.html",
							"GUID-C5454330-0318-45B2-9A9B-C8E70ECA1CBE.html",
							"GUID-C5454330-0318-45B2-9A9B-C8E70ECA1CBE.html",
							"GUID-C5454330-0318-45B2-9A9B-C8E70ECA1CBE.html",
							"GUID-C5454330-0318-45B2-9A9B-C8E70ECA1CBE.html",
							"GUID-9FDD3893-2FF9-4D8D-AF4E-1C7D41BDB57E.html",
							"GUID-9FDD3893-2FF9-4D8D-AF4E-1C7D41BDB57E.html",
							"GUID-9FDD3893-2FF9-4D8D-AF4E-1C7D41BDB57E.html",
							"GUID-9FDD3893-2FF9-4D8D-AF4E-1C7D41BDB57E.html",
							"GUID-9FDD3893-2FF9-4D8D-AF4E-1C7D41BDB57E.html",
							"GUID-9FDD3893-2FF9-4D8D-AF4E-1C7D41BDB57E.html",
							"GUID-9FDD3893-2FF9-4D8D-AF4E-1C7D41BDB57E.html",
							"GUID-9FDD3893-2FF9-4D8D-AF4E-1C7D41BDB57E.html",
							"GUID-9FDD3893-2FF9-4D8D-AF4E-1C7D41BDB57E.html",
							"GUID-5392994E-6226-4375-9609-AF6A65C6E513.html",
							"GUID-5392994E-6226-4375-9609-AF6A65C6E513.html",
							"GUID-5392994E-6226-4375-9609-AF6A65C6E513.html",
							"GUID-5392994E-6226-4375-9609-AF6A65C6E513.html",
							"GUID-5392994E-6226-4375-9609-AF6A65C6E513.html",
							"GUID-5392994E-6226-4375-9609-AF6A65C6E513.html",
							"GUID-5392994E-6226-4375-9609-AF6A65C6E513.html",
							"GUID-5392994E-6226-4375-9609-AF6A65C6E513.html",
							"GUID-5392994E-6226-4375-9609-AF6A65C6E513.html",
							"GUID-5392994E-6226-4375-9609-AF6A65C6E513.html",
							"GUID-B4A32E53-A460-4577-9F1D-EECBA46A1FC3.html",
							"GUID-B4A32E53-A460-4577-9F1D-EECBA46A1FC3.html",
							"GUID-B4A32E53-A460-4577-9F1D-EECBA46A1FC3.html",
							"GUID-B4A32E53-A460-4577-9F1D-EECBA46A1FC3.html",
							"GUID-B4A32E53-A460-4577-9F1D-EECBA46A1FC3.html",
							"GUID-B4A32E53-A460-4577-9F1D-EECBA46A1FC3.html",
							"GUID-B4A32E53-A460-4577-9F1D-EECBA46A1FC3.html",
							"GUID-B4A32E53-A460-4577-9F1D-EECBA46A1FC3.html",
							"GUID-B4A32E53-A460-4577-9F1D-EECBA46A1FC3.html",
							"GUID-1CFDAFAF-C24C-465F-A7F0-A08B116CA847.html",
							"GUID-1CFDAFAF-C24C-465F-A7F0-A08B116CA847.html",
							"GUID-1CFDAFAF-C24C-465F-A7F0-A08B116CA847.html",
							"GUID-1CFDAFAF-C24C-465F-A7F0-A08B116CA847.html",
							"GUID-1CFDAFAF-C24C-465F-A7F0-A08B116CA847.html",
							"GUID-1CFDAFAF-C24C-465F-A7F0-A08B116CA847.html",
							"GUID-1CFDAFAF-C24C-465F-A7F0-A08B116CA847.html",
							"GUID-1CFDAFAF-C24C-465F-A7F0-A08B116CA847.html",
							"GUID-1CFDAFAF-C24C-465F-A7F0-A08B116CA847.html",
							"GUID-0DCC38EE-6A56-46F3-A478-CBC928103FB0.html",
							"GUID-0DCC38EE-6A56-46F3-A478-CBC928103FB0.html",
							"GUID-0DCC38EE-6A56-46F3-A478-CBC928103FB0.html",
							"GUID-0DCC38EE-6A56-46F3-A478-CBC928103FB0.html",
							"GUID-0DCC38EE-6A56-46F3-A478-CBC928103FB0.html",
							"GUID-0DCC38EE-6A56-46F3-A478-CBC928103FB0.html",
							"GUID-0DCC38EE-6A56-46F3-A478-CBC928103FB0.html",
							"GUID-0DCC38EE-6A56-46F3-A478-CBC928103FB0.html",
							"GUID-0DCC38EE-6A56-46F3-A478-CBC928103FB0.html",
							"GUID-795BC976-A868-464A-8A30-6E83C2C9C849.html",
							"GUID-795BC976-A868-464A-8A30-6E83C2C9C849.html",
							"GUID-795BC976-A868-464A-8A30-6E83C2C9C849.html",
							"GUID-795BC976-A868-464A-8A30-6E83C2C9C849.html",
							"GUID-795BC976-A868-464A-8A30-6E83C2C9C849.html",
							"GUID-795BC976-A868-464A-8A30-6E83C2C9C849.html",
							"GUID-795BC976-A868-464A-8A30-6E83C2C9C849.html",
							"GUID-795BC976-A868-464A-8A30-6E83C2C9C849.html",
							"GUID-795BC976-A868-464A-8A30-6E83C2C9C849.html",
							"GUID-872D8994-5BFD-44C5-9C42-29FAAE519A65.html",
							"GUID-872D8994-5BFD-44C5-9C42-29FAAE519A65.html",
							"GUID-872D8994-5BFD-44C5-9C42-29FAAE519A65.html",
							"GUID-872D8994-5BFD-44C5-9C42-29FAAE519A65.html",
							"GUID-872D8994-5BFD-44C5-9C42-29FAAE519A65.html",
							"GUID-872D8994-5BFD-44C5-9C42-29FAAE519A65.html",
							"GUID-872D8994-5BFD-44C5-9C42-29FAAE519A65.html",
							"GUID-872D8994-5BFD-44C5-9C42-29FAAE519A65.html",
							"GUID-872D8994-5BFD-44C5-9C42-29FAAE519A65.html",
							"GUID-8C49112E-41A0-4508-B85D-7BEDAFCAAB53.html",
							"GUID-8C49112E-41A0-4508-B85D-7BEDAFCAAB53.html",
							"GUID-8C49112E-41A0-4508-B85D-7BEDAFCAAB53.html",
							"GUID-8C49112E-41A0-4508-B85D-7BEDAFCAAB53.html",
							"GUID-8C49112E-41A0-4508-B85D-7BEDAFCAAB53.html",
							"GUID-8C49112E-41A0-4508-B85D-7BEDAFCAAB53.html",
							"GUID-8C49112E-41A0-4508-B85D-7BEDAFCAAB53.html",
							"GUID-8C49112E-41A0-4508-B85D-7BEDAFCAAB53.html",
							"GUID-8C49112E-41A0-4508-B85D-7BEDAFCAAB53.html",
							"GUID-9F1FDE4F-5BFE-4BC7-B41E-AD7E095365D2.html",
							"GUID-9F1FDE4F-5BFE-4BC7-B41E-AD7E095365D2.html",
							"GUID-9F1FDE4F-5BFE-4BC7-B41E-AD7E095365D2.html",
							"GUID-9F1FDE4F-5BFE-4BC7-B41E-AD7E095365D2.html",
							"GUID-9F1FDE4F-5BFE-4BC7-B41E-AD7E095365D2.html",
							"GUID-9F1FDE4F-5BFE-4BC7-B41E-AD7E095365D2.html",
							"GUID-9F1FDE4F-5BFE-4BC7-B41E-AD7E095365D2.html",
							"GUID-9F1FDE4F-5BFE-4BC7-B41E-AD7E095365D2.html",
							"GUID-9F1FDE4F-5BFE-4BC7-B41E-AD7E095365D2.html",
							"GUID-275E0210-81B4-4CB4-8FB9-026D6B73893C.html",
							"GUID-275E0210-81B4-4CB4-8FB9-026D6B73893C.html",
							"GUID-275E0210-81B4-4CB4-8FB9-026D6B73893C.html",
							"GUID-275E0210-81B4-4CB4-8FB9-026D6B73893C.html",
							"GUID-275E0210-81B4-4CB4-8FB9-026D6B73893C.html",
							"GUID-275E0210-81B4-4CB4-8FB9-026D6B73893C.html",
							"GUID-275E0210-81B4-4CB4-8FB9-026D6B73893C.html",
							"GUID-275E0210-81B4-4CB4-8FB9-026D6B73893C.html",
							"GUID-275E0210-81B4-4CB4-8FB9-026D6B73893C.html",
							"GUID-34F7EFDD-0993-44E6-8EDC-D630BE5A4F29.html",
							"GUID-34F7EFDD-0993-44E6-8EDC-D630BE5A4F29.html",
							"GUID-34F7EFDD-0993-44E6-8EDC-D630BE5A4F29.html",
							"GUID-34F7EFDD-0993-44E6-8EDC-D630BE5A4F29.html",
							"GUID-34F7EFDD-0993-44E6-8EDC-D630BE5A4F29.html",
							"GUID-34F7EFDD-0993-44E6-8EDC-D630BE5A4F29.html",
							"GUID-34F7EFDD-0993-44E6-8EDC-D630BE5A4F29.html",
							"GUID-34F7EFDD-0993-44E6-8EDC-D630BE5A4F29.html",
							"GUID-34F7EFDD-0993-44E6-8EDC-D630BE5A4F29.html",
							"GUID-27033191-0E3F-455E-9DA6-7AC8067ED6C4.html",
							"GUID-27033191-0E3F-455E-9DA6-7AC8067ED6C4.html",
							"GUID-27033191-0E3F-455E-9DA6-7AC8067ED6C4.html",
							"GUID-27033191-0E3F-455E-9DA6-7AC8067ED6C4.html",
							"GUID-27033191-0E3F-455E-9DA6-7AC8067ED6C4.html",
							"GUID-27033191-0E3F-455E-9DA6-7AC8067ED6C4.html",
							"GUID-27033191-0E3F-455E-9DA6-7AC8067ED6C4.html",
							"GUID-27033191-0E3F-455E-9DA6-7AC8067ED6C4.html",
							"GUID-27033191-0E3F-455E-9DA6-7AC8067ED6C4.html",
							"GUID-A5701C7E-4712-4BD4-8F72-7AB8FEAB34C8.html",
							"GUID-A5701C7E-4712-4BD4-8F72-7AB8FEAB34C8.html",
							"GUID-A5701C7E-4712-4BD4-8F72-7AB8FEAB34C8.html",
							"GUID-A5701C7E-4712-4BD4-8F72-7AB8FEAB34C8.html",
							"GUID-A5701C7E-4712-4BD4-8F72-7AB8FEAB34C8.html",
							"GUID-A5701C7E-4712-4BD4-8F72-7AB8FEAB34C8.html",
							"GUID-A5701C7E-4712-4BD4-8F72-7AB8FEAB34C8.html",
							"GUID-A5701C7E-4712-4BD4-8F72-7AB8FEAB34C8.html",
							"GUID-A5701C7E-4712-4BD4-8F72-7AB8FEAB34C8.html",
							"GUID-451E74F5-385B-49A5-8158-3F4A3751C1E8.html",
							"GUID-451E74F5-385B-49A5-8158-3F4A3751C1E8.html",
							"GUID-451E74F5-385B-49A5-8158-3F4A3751C1E8.html",
							"GUID-451E74F5-385B-49A5-8158-3F4A3751C1E8.html",
							"GUID-451E74F5-385B-49A5-8158-3F4A3751C1E8.html",
							"GUID-451E74F5-385B-49A5-8158-3F4A3751C1E8.html",
							"GUID-451E74F5-385B-49A5-8158-3F4A3751C1E8.html",
							"GUID-451E74F5-385B-49A5-8158-3F4A3751C1E8.html",
							"GUID-451E74F5-385B-49A5-8158-3F4A3751C1E8.html",
							"GUID-451E74F5-385B-49A5-8158-3F4A3751C1E8.html",
							"GUID-25A6B9BF-01FA-403D-99BD-8CC1D4961010.html",
							"GUID-25A6B9BF-01FA-403D-99BD-8CC1D4961010.html",
							"GUID-25A6B9BF-01FA-403D-99BD-8CC1D4961010.html",
							"GUID-25A6B9BF-01FA-403D-99BD-8CC1D4961010.html",
							"GUID-25A6B9BF-01FA-403D-99BD-8CC1D4961010.html",
							"GUID-25A6B9BF-01FA-403D-99BD-8CC1D4961010.html",
							"GUID-25A6B9BF-01FA-403D-99BD-8CC1D4961010.html",
							"GUID-25A6B9BF-01FA-403D-99BD-8CC1D4961010.html",
							"GUID-25A6B9BF-01FA-403D-99BD-8CC1D4961010.html",
							"GUID-EF64FE41-7FD4-4F62-82AE-CB38F878A023.html",
							"GUID-EF64FE41-7FD4-4F62-82AE-CB38F878A023.html",
							"GUID-EF64FE41-7FD4-4F62-82AE-CB38F878A023.html",
							"GUID-EF64FE41-7FD4-4F62-82AE-CB38F878A023.html",
							"GUID-EF64FE41-7FD4-4F62-82AE-CB38F878A023.html",
							"GUID-EF64FE41-7FD4-4F62-82AE-CB38F878A023.html",
							"GUID-EF64FE41-7FD4-4F62-82AE-CB38F878A023.html",
							"GUID-EF64FE41-7FD4-4F62-82AE-CB38F878A023.html",
							"GUID-EF64FE41-7FD4-4F62-82AE-CB38F878A023.html",
							"GUID-10072785-035A-4863-BE53-F38A70E9B15F.html",
							"GUID-10072785-035A-4863-BE53-F38A70E9B15F.html",
							"GUID-10072785-035A-4863-BE53-F38A70E9B15F.html",
							"GUID-10072785-035A-4863-BE53-F38A70E9B15F.html",
							"GUID-10072785-035A-4863-BE53-F38A70E9B15F.html",
							"GUID-10072785-035A-4863-BE53-F38A70E9B15F.html",
							"GUID-10072785-035A-4863-BE53-F38A70E9B15F.html",
							"GUID-10072785-035A-4863-BE53-F38A70E9B15F.html",
							"GUID-10072785-035A-4863-BE53-F38A70E9B15F.html",
							"GUID-991AE681-487B-4548-A400-736D397C3ADE.html",
							"GUID-991AE681-487B-4548-A400-736D397C3ADE.html",
							"GUID-991AE681-487B-4548-A400-736D397C3ADE.html",
							"GUID-991AE681-487B-4548-A400-736D397C3ADE.html",
							"GUID-991AE681-487B-4548-A400-736D397C3ADE.html",
							"GUID-991AE681-487B-4548-A400-736D397C3ADE.html",
							"GUID-991AE681-487B-4548-A400-736D397C3ADE.html",
							"GUID-991AE681-487B-4548-A400-736D397C3ADE.html",
							"GUID-991AE681-487B-4548-A400-736D397C3ADE.html",
							"GUID-CD39560C-817A-443A-BF6A-3302EADADECC.html",
							"GUID-CD39560C-817A-443A-BF6A-3302EADADECC.html",
							"GUID-CD39560C-817A-443A-BF6A-3302EADADECC.html",
							"GUID-CD39560C-817A-443A-BF6A-3302EADADECC.html",
							"GUID-CD39560C-817A-443A-BF6A-3302EADADECC.html",
							"GUID-CD39560C-817A-443A-BF6A-3302EADADECC.html",
							"GUID-CD39560C-817A-443A-BF6A-3302EADADECC.html",
							"GUID-CD39560C-817A-443A-BF6A-3302EADADECC.html",
							"GUID-CD39560C-817A-443A-BF6A-3302EADADECC.html",
							"GUID-6D184516-AC34-45E1-817F-5CA0946AFC80.html",
							"GUID-6D184516-AC34-45E1-817F-5CA0946AFC80.html",
							"GUID-6D184516-AC34-45E1-817F-5CA0946AFC80.html",
							"GUID-6D184516-AC34-45E1-817F-5CA0946AFC80.html",
							"GUID-6D184516-AC34-45E1-817F-5CA0946AFC80.html",
							"GUID-6D184516-AC34-45E1-817F-5CA0946AFC80.html",
							"GUID-6D184516-AC34-45E1-817F-5CA0946AFC80.html",
							"GUID-6D184516-AC34-45E1-817F-5CA0946AFC80.html",
							"GUID-6D184516-AC34-45E1-817F-5CA0946AFC80.html",
							"GUID-AD5F0FF1-8834-4836-8017-752E254CBEE1.html",
							"GUID-AD5F0FF1-8834-4836-8017-752E254CBEE1.html",
							"GUID-AD5F0FF1-8834-4836-8017-752E254CBEE1.html",
							"GUID-AD5F0FF1-8834-4836-8017-752E254CBEE1.html",
							"GUID-AD5F0FF1-8834-4836-8017-752E254CBEE1.html",
							"GUID-AD5F0FF1-8834-4836-8017-752E254CBEE1.html",
							"GUID-AD5F0FF1-8834-4836-8017-752E254CBEE1.html",
							"GUID-AD5F0FF1-8834-4836-8017-752E254CBEE1.html",
							"GUID-AD5F0FF1-8834-4836-8017-752E254CBEE1.html",
							"GUID-7661206F-CAB7-4AE5-8753-959780F097F2.html","GUID-2A12B0B7-6716-404B-A3EB-0D90469A7A5C.html",
							"GUID-2A12B0B7-6716-404B-A3EB-0D90469A7A5C.html",
							"GUID-2A12B0B7-6716-404B-A3EB-0D90469A7A5C.html",
							"GUID-2A12B0B7-6716-404B-A3EB-0D90469A7A5C.html",
							"GUID-2A12B0B7-6716-404B-A3EB-0D90469A7A5C.html",
							"GUID-F72E92DD-7D52-4992-AC37-DEE726E62B8D.html",
							"GUID-F72E92DD-7D52-4992-AC37-DEE726E62B8D.html",
							"GUID-F72E92DD-7D52-4992-AC37-DEE726E62B8D.html",
							"GUID-F72E92DD-7D52-4992-AC37-DEE726E62B8D.html",
							"GUID-F72E92DD-7D52-4992-AC37-DEE726E62B8D.html",
							"GUID-B8B6B105-B87E-4B49-8C85-E50A88645132.html",
							"GUID-B8B6B105-B87E-4B49-8C85-E50A88645132.html",
							"GUID-B8B6B105-B87E-4B49-8C85-E50A88645132.html",
							"GUID-B8B6B105-B87E-4B49-8C85-E50A88645132.html",
							"GUID-B8B6B105-B87E-4B49-8C85-E50A88645132.html",
							"GUID-E38C3BC8-63A8-4ACC-8D6D-5655B07AB487.html",
							"GUID-E38C3BC8-63A8-4ACC-8D6D-5655B07AB487.html",
							"GUID-E38C3BC8-63A8-4ACC-8D6D-5655B07AB487.html",
							"GUID-E38C3BC8-63A8-4ACC-8D6D-5655B07AB487.html",
							"GUID-E38C3BC8-63A8-4ACC-8D6D-5655B07AB487.html",
							"GUID-893CC7EF-C50C-4168-B8D8-D7CC01F8C42B.html",
							"GUID-893CC7EF-C50C-4168-B8D8-D7CC01F8C42B.html",
							"GUID-893CC7EF-C50C-4168-B8D8-D7CC01F8C42B.html",
							"GUID-893CC7EF-C50C-4168-B8D8-D7CC01F8C42B.html",
							"GUID-893CC7EF-C50C-4168-B8D8-D7CC01F8C42B.html",
							"GUID-9B1E2EC6-F68D-4D2A-9E95-EBE8517676C1.html",
							"GUID-9B1E2EC6-F68D-4D2A-9E95-EBE8517676C1.html",
							"GUID-9B1E2EC6-F68D-4D2A-9E95-EBE8517676C1.html",
							"GUID-9B1E2EC6-F68D-4D2A-9E95-EBE8517676C1.html",
							"GUID-9B1E2EC6-F68D-4D2A-9E95-EBE8517676C1.html",
							"GUID-1CD57E64-3FE9-4EF8-8D2E-E206DA818A67.html",
							"GUID-1CD57E64-3FE9-4EF8-8D2E-E206DA818A67.html",
							"GUID-1CD57E64-3FE9-4EF8-8D2E-E206DA818A67.html",
							"GUID-1CD57E64-3FE9-4EF8-8D2E-E206DA818A67.html",
							"GUID-1CD57E64-3FE9-4EF8-8D2E-E206DA818A67.html",
							"GUID-79789389-ABA8-441C-AD87-F6477B0C7EDA.html",
							"GUID-79789389-ABA8-441C-AD87-F6477B0C7EDA.html",
							"GUID-79789389-ABA8-441C-AD87-F6477B0C7EDA.html",
							"GUID-79789389-ABA8-441C-AD87-F6477B0C7EDA.html",
							"GUID-79789389-ABA8-441C-AD87-F6477B0C7EDA.html",
							"GUID-5A22F23D-B872-46F2-8A24-5D43DB8C42D1.html",
							"GUID-5A22F23D-B872-46F2-8A24-5D43DB8C42D1.html",
							"GUID-5A22F23D-B872-46F2-8A24-5D43DB8C42D1.html",
							"GUID-5A22F23D-B872-46F2-8A24-5D43DB8C42D1.html",
							"GUID-5A22F23D-B872-46F2-8A24-5D43DB8C42D1.html",
							"GUID-9EA28ADA-F87E-49B0-B875-FB14E533A179.html",
							"GUID-9EA28ADA-F87E-49B0-B875-FB14E533A179.html",
							"GUID-9EA28ADA-F87E-49B0-B875-FB14E533A179.html",
							"GUID-9EA28ADA-F87E-49B0-B875-FB14E533A179.html",
							"GUID-9EA28ADA-F87E-49B0-B875-FB14E533A179.html",
							"GUID-2D10CAD4-69AA-4643-9129-3C2DCAF3FB11.html",
							"GUID-2D10CAD4-69AA-4643-9129-3C2DCAF3FB11.html",
							"GUID-2D10CAD4-69AA-4643-9129-3C2DCAF3FB11.html",
							"GUID-2D10CAD4-69AA-4643-9129-3C2DCAF3FB11.html",
							"GUID-2D10CAD4-69AA-4643-9129-3C2DCAF3FB11.html",
							"GUID-2F5CADE1-DA41-49CE-87E8-4662B4FB0A83.html",
							"GUID-2F5CADE1-DA41-49CE-87E8-4662B4FB0A83.html",
							"GUID-2F5CADE1-DA41-49CE-87E8-4662B4FB0A83.html",
							"GUID-2F5CADE1-DA41-49CE-87E8-4662B4FB0A83.html",
							"GUID-2F5CADE1-DA41-49CE-87E8-4662B4FB0A83.html",
							"GUID-AC8ECF14-F6E4-42C8-8121-D6FD567CA3A6.html",
							"GUID-AC8ECF14-F6E4-42C8-8121-D6FD567CA3A6.html",
							"GUID-AC8ECF14-F6E4-42C8-8121-D6FD567CA3A6.html",
							"GUID-AC8ECF14-F6E4-42C8-8121-D6FD567CA3A6.html",
							"GUID-AC8ECF14-F6E4-42C8-8121-D6FD567CA3A6.html",
							"GUID-51E9707F-3342-419C-A974-0A919879F2F1.html",
							"GUID-51E9707F-3342-419C-A974-0A919879F2F1.html",
							"GUID-51E9707F-3342-419C-A974-0A919879F2F1.html",
							"GUID-51E9707F-3342-419C-A974-0A919879F2F1.html",
							"GUID-51E9707F-3342-419C-A974-0A919879F2F1.html",
							"GUID-422854A2-9C5D-4023-B6CB-5CA49D8C916F.html",
							"GUID-422854A2-9C5D-4023-B6CB-5CA49D8C916F.html",
							"GUID-422854A2-9C5D-4023-B6CB-5CA49D8C916F.html",
							"GUID-422854A2-9C5D-4023-B6CB-5CA49D8C916F.html",
							"GUID-422854A2-9C5D-4023-B6CB-5CA49D8C916F.html",
							"GUID-0B826D34-A979-44F5-BC70-A33BCCA5169C.html",
							"GUID-0B826D34-A979-44F5-BC70-A33BCCA5169C.html",
							"GUID-0B826D34-A979-44F5-BC70-A33BCCA5169C.html",
							"GUID-0B826D34-A979-44F5-BC70-A33BCCA5169C.html",
							"GUID-0B826D34-A979-44F5-BC70-A33BCCA5169C.html",
							"GUID-97C2ABFE-D661-4D4F-B2B4-8194C61A820D.html",
							"GUID-97C2ABFE-D661-4D4F-B2B4-8194C61A820D.html",
							"GUID-97C2ABFE-D661-4D4F-B2B4-8194C61A820D.html",
							"GUID-97C2ABFE-D661-4D4F-B2B4-8194C61A820D.html",
							"GUID-97C2ABFE-D661-4D4F-B2B4-8194C61A820D.html",
							"GUID-99AF1663-92EF-49C6-88FC-150B6831A0C8.html","GUID-5708481B-A7D3-4F51-9C29-26730AD2FB31.html",
							"GUID-5708481B-A7D3-4F51-9C29-26730AD2FB31.html",
							"GUID-5708481B-A7D3-4F51-9C29-26730AD2FB31.html",
							"GUID-5708481B-A7D3-4F51-9C29-26730AD2FB31.html",
							"GUID-5708481B-A7D3-4F51-9C29-26730AD2FB31.html",
							"GUID-D86996D3-81B0-48D6-AE1D-E2C4EC14524D.html",
							"GUID-D86996D3-81B0-48D6-AE1D-E2C4EC14524D.html",
							"GUID-D86996D3-81B0-48D6-AE1D-E2C4EC14524D.html",
							"GUID-D86996D3-81B0-48D6-AE1D-E2C4EC14524D.html",
							"GUID-D86996D3-81B0-48D6-AE1D-E2C4EC14524D.html",
							"GUID-12640A8E-8418-4BAE-A54A-2F9D7EDBFEB5.html",
							"GUID-12640A8E-8418-4BAE-A54A-2F9D7EDBFEB5.html",
							"GUID-12640A8E-8418-4BAE-A54A-2F9D7EDBFEB5.html",
							"GUID-12640A8E-8418-4BAE-A54A-2F9D7EDBFEB5.html",
							"GUID-12640A8E-8418-4BAE-A54A-2F9D7EDBFEB5.html",
							"GUID-F1B65400-088A-496E-84C9-2F9DB0B9E557.html",
							"GUID-F1B65400-088A-496E-84C9-2F9DB0B9E557.html",
							"GUID-F1B65400-088A-496E-84C9-2F9DB0B9E557.html",
							"GUID-F1B65400-088A-496E-84C9-2F9DB0B9E557.html",
							"GUID-F1B65400-088A-496E-84C9-2F9DB0B9E557.html",
							"GUID-926A78A2-B859-4C84-970F-AE2E80ED9557.html",
							"GUID-926A78A2-B859-4C84-970F-AE2E80ED9557.html",
							"GUID-926A78A2-B859-4C84-970F-AE2E80ED9557.html",
							"GUID-926A78A2-B859-4C84-970F-AE2E80ED9557.html",
							"GUID-926A78A2-B859-4C84-970F-AE2E80ED9557.html",
							"GUID-762D0812-9CB6-4743-9219-FAA1E0A3BB4F.html",
							"GUID-762D0812-9CB6-4743-9219-FAA1E0A3BB4F.html",
							"GUID-762D0812-9CB6-4743-9219-FAA1E0A3BB4F.html",
							"GUID-762D0812-9CB6-4743-9219-FAA1E0A3BB4F.html",
							"GUID-762D0812-9CB6-4743-9219-FAA1E0A3BB4F.html",
							"GUID-F869E82E-625B-4704-832E-5CE94ECF9075.html",
							"GUID-F869E82E-625B-4704-832E-5CE94ECF9075.html",
							"GUID-F869E82E-625B-4704-832E-5CE94ECF9075.html",
							"GUID-F869E82E-625B-4704-832E-5CE94ECF9075.html",
							"GUID-F869E82E-625B-4704-832E-5CE94ECF9075.html",
							"GUID-22DC8C66-F021-4745-9154-E318A3BF0FF7.html",
							"GUID-22DC8C66-F021-4745-9154-E318A3BF0FF7.html",
							"GUID-22DC8C66-F021-4745-9154-E318A3BF0FF7.html",
							"GUID-22DC8C66-F021-4745-9154-E318A3BF0FF7.html",
							"GUID-22DC8C66-F021-4745-9154-E318A3BF0FF7.html",
							"GUID-699F2D0E-C033-4A6F-94BF-69BE28D606BC.html","GUID-377BEC63-714D-412B-B2AD-FDAC2223CDCA.html","GUID-6CD5E284-A567-481D-B750-95296B6A4709.html",
							"GUID-6CD5E284-A567-481D-B750-95296B6A4709.html",
							"GUID-6CD5E284-A567-481D-B750-95296B6A4709.html",
							"GUID-6CD5E284-A567-481D-B750-95296B6A4709.html",
							"GUID-6CD5E284-A567-481D-B750-95296B6A4709.html",
							"GUID-6CD5E284-A567-481D-B750-95296B6A4709.html",
							"GUID-6CD5E284-A567-481D-B750-95296B6A4709.html",
							"GUID-6CD5E284-A567-481D-B750-95296B6A4709.html",
							"GUID-6CD5E284-A567-481D-B750-95296B6A4709.html",
							"GUID-EFD6418B-B181-4578-97F1-BDDF28F46472.html",
							"GUID-EFD6418B-B181-4578-97F1-BDDF28F46472.html",
							"GUID-EFD6418B-B181-4578-97F1-BDDF28F46472.html",
							"GUID-EFD6418B-B181-4578-97F1-BDDF28F46472.html",
							"GUID-EFD6418B-B181-4578-97F1-BDDF28F46472.html",
							"GUID-EFD6418B-B181-4578-97F1-BDDF28F46472.html",
							"GUID-EFD6418B-B181-4578-97F1-BDDF28F46472.html",
							"GUID-EFD6418B-B181-4578-97F1-BDDF28F46472.html",
							"GUID-EFD6418B-B181-4578-97F1-BDDF28F46472.html",
							"GUID-E92E5708-1F78-49ED-AA5C-DCCFF919EF2A.html",
							"GUID-E92E5708-1F78-49ED-AA5C-DCCFF919EF2A.html",
							"GUID-E92E5708-1F78-49ED-AA5C-DCCFF919EF2A.html",
							"GUID-E92E5708-1F78-49ED-AA5C-DCCFF919EF2A.html",
							"GUID-E92E5708-1F78-49ED-AA5C-DCCFF919EF2A.html",
							"GUID-E92E5708-1F78-49ED-AA5C-DCCFF919EF2A.html",
							"GUID-E92E5708-1F78-49ED-AA5C-DCCFF919EF2A.html",
							"GUID-E92E5708-1F78-49ED-AA5C-DCCFF919EF2A.html",
							"GUID-E92E5708-1F78-49ED-AA5C-DCCFF919EF2A.html",
							"GUID-879E5988-4656-4508-B546-3AD507882477.html",
							"GUID-879E5988-4656-4508-B546-3AD507882477.html",
							"GUID-879E5988-4656-4508-B546-3AD507882477.html",
							"GUID-879E5988-4656-4508-B546-3AD507882477.html",
							"GUID-879E5988-4656-4508-B546-3AD507882477.html",
							"GUID-879E5988-4656-4508-B546-3AD507882477.html",
							"GUID-879E5988-4656-4508-B546-3AD507882477.html",
							"GUID-879E5988-4656-4508-B546-3AD507882477.html",
							"GUID-879E5988-4656-4508-B546-3AD507882477.html",
							"GUID-CC7EBD4A-40CB-4543-8B15-227C30ECAAE6.html",
							"GUID-CC7EBD4A-40CB-4543-8B15-227C30ECAAE6.html",
							"GUID-CC7EBD4A-40CB-4543-8B15-227C30ECAAE6.html",
							"GUID-CC7EBD4A-40CB-4543-8B15-227C30ECAAE6.html",
							"GUID-CC7EBD4A-40CB-4543-8B15-227C30ECAAE6.html",
							"GUID-CC7EBD4A-40CB-4543-8B15-227C30ECAAE6.html",
							"GUID-CC7EBD4A-40CB-4543-8B15-227C30ECAAE6.html",
							"GUID-CC7EBD4A-40CB-4543-8B15-227C30ECAAE6.html",
							"GUID-CC7EBD4A-40CB-4543-8B15-227C30ECAAE6.html",
							"GUID-AC7E12A6-45A5-4DC1-B693-42C843F772D5.html",
							"GUID-AC7E12A6-45A5-4DC1-B693-42C843F772D5.html",
							"GUID-AC7E12A6-45A5-4DC1-B693-42C843F772D5.html",
							"GUID-AC7E12A6-45A5-4DC1-B693-42C843F772D5.html",
							"GUID-AC7E12A6-45A5-4DC1-B693-42C843F772D5.html",
							"GUID-AC7E12A6-45A5-4DC1-B693-42C843F772D5.html",
							"GUID-AC7E12A6-45A5-4DC1-B693-42C843F772D5.html",
							"GUID-AC7E12A6-45A5-4DC1-B693-42C843F772D5.html",
							"GUID-AC7E12A6-45A5-4DC1-B693-42C843F772D5.html",
							"GUID-30558746-7A11-4B4E-8EF1-555B53BD7554.html",
							"GUID-30558746-7A11-4B4E-8EF1-555B53BD7554.html",
							"GUID-30558746-7A11-4B4E-8EF1-555B53BD7554.html",
							"GUID-30558746-7A11-4B4E-8EF1-555B53BD7554.html",
							"GUID-30558746-7A11-4B4E-8EF1-555B53BD7554.html",
							"GUID-30558746-7A11-4B4E-8EF1-555B53BD7554.html",
							"GUID-30558746-7A11-4B4E-8EF1-555B53BD7554.html",
							"GUID-30558746-7A11-4B4E-8EF1-555B53BD7554.html",
							"GUID-30558746-7A11-4B4E-8EF1-555B53BD7554.html",
							"GUID-5EF679A7-8C43-406D-81D8-DE50C6E653EF.html","GUID-9399FA7E-98E1-4B27-98DB-D51A22A37B03.html","GUID-12393E8B-6154-450D-8055-3587F401DD10.html","GUID-C0382C6E-45C6-4FEB-8E5C-271DA5DD89CF.html",
							"GUID-C0382C6E-45C6-4FEB-8E5C-271DA5DD89CF.html",
							"GUID-C0382C6E-45C6-4FEB-8E5C-271DA5DD89CF.html",
							"GUID-C0382C6E-45C6-4FEB-8E5C-271DA5DD89CF.html",
							"GUID-C0382C6E-45C6-4FEB-8E5C-271DA5DD89CF.html",
							"GUID-C0382C6E-45C6-4FEB-8E5C-271DA5DD89CF.html",
							"GUID-C0382C6E-45C6-4FEB-8E5C-271DA5DD89CF.html",
							"GUID-C0382C6E-45C6-4FEB-8E5C-271DA5DD89CF.html",
							"GUID-C0382C6E-45C6-4FEB-8E5C-271DA5DD89CF.html",
							"GUID-24B1697C-3870-4463-96D9-F7AD64A87283.html",
							"GUID-24B1697C-3870-4463-96D9-F7AD64A87283.html",
							"GUID-24B1697C-3870-4463-96D9-F7AD64A87283.html",
							"GUID-24B1697C-3870-4463-96D9-F7AD64A87283.html",
							"GUID-24B1697C-3870-4463-96D9-F7AD64A87283.html",
							"GUID-24B1697C-3870-4463-96D9-F7AD64A87283.html",
							"GUID-24B1697C-3870-4463-96D9-F7AD64A87283.html",
							"GUID-24B1697C-3870-4463-96D9-F7AD64A87283.html",
							"GUID-24B1697C-3870-4463-96D9-F7AD64A87283.html",
							"GUID-62A3C35D-AB36-4A54-B9DE-E4679E8B0AA3.html",
							"GUID-62A3C35D-AB36-4A54-B9DE-E4679E8B0AA3.html",
							"GUID-62A3C35D-AB36-4A54-B9DE-E4679E8B0AA3.html",
							"GUID-62A3C35D-AB36-4A54-B9DE-E4679E8B0AA3.html",
							"GUID-62A3C35D-AB36-4A54-B9DE-E4679E8B0AA3.html",
							"GUID-62A3C35D-AB36-4A54-B9DE-E4679E8B0AA3.html",
							"GUID-62A3C35D-AB36-4A54-B9DE-E4679E8B0AA3.html",
							"GUID-62A3C35D-AB36-4A54-B9DE-E4679E8B0AA3.html",
							"GUID-62A3C35D-AB36-4A54-B9DE-E4679E8B0AA3.html",
							"GUID-BE047E8D-0758-4D6E-B48D-EAB78E33B6FA.html","GUID-42BAD7D0-A6C6-4F6C-905D-E26CB9AD0BA9.html",
							"GUID-42BAD7D0-A6C6-4F6C-905D-E26CB9AD0BA9.html",
							"GUID-42BAD7D0-A6C6-4F6C-905D-E26CB9AD0BA9.html",
							"GUID-42BAD7D0-A6C6-4F6C-905D-E26CB9AD0BA9.html",
							"GUID-42BAD7D0-A6C6-4F6C-905D-E26CB9AD0BA9.html",
							"GUID-42BAD7D0-A6C6-4F6C-905D-E26CB9AD0BA9.html",
							"GUID-42BAD7D0-A6C6-4F6C-905D-E26CB9AD0BA9.html",
							"GUID-42BAD7D0-A6C6-4F6C-905D-E26CB9AD0BA9.html",
							"GUID-42BAD7D0-A6C6-4F6C-905D-E26CB9AD0BA9.html",
							"GUID-655C26EF-BF0F-4541-9B60-D28687036554.html",
							"GUID-655C26EF-BF0F-4541-9B60-D28687036554.html",
							"GUID-655C26EF-BF0F-4541-9B60-D28687036554.html",
							"GUID-655C26EF-BF0F-4541-9B60-D28687036554.html",
							"GUID-655C26EF-BF0F-4541-9B60-D28687036554.html",
							"GUID-655C26EF-BF0F-4541-9B60-D28687036554.html",
							"GUID-655C26EF-BF0F-4541-9B60-D28687036554.html",
							"GUID-655C26EF-BF0F-4541-9B60-D28687036554.html",
							"GUID-655C26EF-BF0F-4541-9B60-D28687036554.html",
							"GUID-12D12745-24DC-4DD8-A47F-73D0443F0F54.html",
							"GUID-12D12745-24DC-4DD8-A47F-73D0443F0F54.html",
							"GUID-12D12745-24DC-4DD8-A47F-73D0443F0F54.html",
							"GUID-12D12745-24DC-4DD8-A47F-73D0443F0F54.html",
							"GUID-12D12745-24DC-4DD8-A47F-73D0443F0F54.html",
							"GUID-12D12745-24DC-4DD8-A47F-73D0443F0F54.html",
							"GUID-12D12745-24DC-4DD8-A47F-73D0443F0F54.html",
							"GUID-12D12745-24DC-4DD8-A47F-73D0443F0F54.html",
							"GUID-12D12745-24DC-4DD8-A47F-73D0443F0F54.html",
							"GUID-A181736A-2F57-4F53-A16D-D5A6308F7C0F.html",
							"GUID-A181736A-2F57-4F53-A16D-D5A6308F7C0F.html",
							"GUID-A181736A-2F57-4F53-A16D-D5A6308F7C0F.html",
							"GUID-A181736A-2F57-4F53-A16D-D5A6308F7C0F.html",
							"GUID-A181736A-2F57-4F53-A16D-D5A6308F7C0F.html",
							"GUID-A181736A-2F57-4F53-A16D-D5A6308F7C0F.html",
							"GUID-A181736A-2F57-4F53-A16D-D5A6308F7C0F.html",
							"GUID-A181736A-2F57-4F53-A16D-D5A6308F7C0F.html",
							"GUID-A181736A-2F57-4F53-A16D-D5A6308F7C0F.html",
							"GUID-52A7B913-5C55-49C0-AE77-CDDD53DC57C0.html",
							"GUID-52A7B913-5C55-49C0-AE77-CDDD53DC57C0.html",
							"GUID-52A7B913-5C55-49C0-AE77-CDDD53DC57C0.html",
							"GUID-52A7B913-5C55-49C0-AE77-CDDD53DC57C0.html",
							"GUID-52A7B913-5C55-49C0-AE77-CDDD53DC57C0.html",
							"GUID-52A7B913-5C55-49C0-AE77-CDDD53DC57C0.html",
							"GUID-52A7B913-5C55-49C0-AE77-CDDD53DC57C0.html",
							"GUID-52A7B913-5C55-49C0-AE77-CDDD53DC57C0.html",
							"GUID-52A7B913-5C55-49C0-AE77-CDDD53DC57C0.html",
							"GUID-0FB3F908-88EE-45CE-94F5-E97AF9049C9B.html","GUID-7551DC67-D79D-4F0C-B56F-7B17E12400E0.html","GUID-CDA512D8-0DE4-4672-8716-04CAC681CB38.html","GUID-F05182E4-B102-4775-A746-1FF37F465312.html","GUID-E8251634-7B15-4073-A103-5A5F128B8699.html","GUID-125F1A93-76CC-4BD7-BACA-01844FBD5F4F.html","GUID-21750586-F9F2-4E33-87FB-8F2994BF4744.html","GUID-07985EED-D525-413B-AEFE-78B563328687.html","GUID-02A694CF-88A5-4ADA-8785-7EEEC62D66EA.html"];

var SearchTitles = ["Introduction",
"Features",
"PHY Architecture",
"PHY Layer Introduction",
"PHY Basic Functionalities",
"Transceiver Feature Access",
"PHY APIs",
"PHY_TaskHandler Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_Init Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_Reset Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_PibSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_PibGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_TxFrame Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_TxDoneCallback Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_RxEnable Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_RxFrameCallback Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_EdStart Function",
"C",
"Summary",
"Description",
"aBaseSuperframeDuration x (2^SD + 1) symbols",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_EdEndCallback Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_EdSample Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_CCAPerform Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_StartContinuousTransmit Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_StopContinuousTransmit Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_TrxSleep Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_TrxWakeup Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_ConfigAutoAck Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_ConfigReservedFrameFiltering Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_ConfigRxPromiscuousMode Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_ConfigRxRPCMode Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_ConfigRxSensitivity Function",
"C",
"Summary",
"Description",
"PRF RSSIBASE_VAL + 3 x (pdtLevel - 1)",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_ConfigTxPwr Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_ConvertTxPwrRegValToDbm Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_ConfigAntennaDiversity Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_GetTrxStatus Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_GetRSSIBaseVal Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_GetTrxConfig Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY_GetSWVersion Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PHY PIB List",
"phySHRDuration Macro",
"C",
"Summary",
"Description",
"Remarks",
"phyCurrentPage Macro",
"C",
"Summary",
"Description",
"Remarks",
"phyChannelsSupported Macro",
"C",
"Summary",
"Description",
"Remarks",
"phyCCAMode Macro",
"C",
"Summary",
"Description",
"Remarks",
"phyMaxFrameDuration Macro",
"C",
"Summary",
"Description",
"Remarks",
"phyCurrentChannel Macro",
"C",
"Summary",
"Description",
"Remarks",
"phyTransmitPower Macro",
"C",
"Summary",
"Description",
"Remarks",
"phySymbolsPerOctet Macro",
"C",
"Summary",
"Description",
"Remarks",
"macMaxFrameRetries Macro",
"C",
"Summary",
"Description",
"Remarks",
"macPANId Macro",
"C",
"Summary",
"Description",
"Remarks",
"macMinBE Macro",
"C",
"Summary",
"Description",
"Remarks",
"macMaxBE Macro",
"C",
"Summary",
"Description",
"Remarks",
"macMaxCSMABackoffs Macro",
"C",
"Summary",
"Description",
"Remarks",
"macShortAddress Macro",
"C",
"Summary",
"Description",
"Remarks",
"macAckWaitDuration Macro",
"C",
"Summary",
"Description",
"Remarks",
"macIeeeAddress Macro",
"C",
"Summary",
"Description",
"Remarks",
"macPromiscuousMode Macro",
"C",
"Summary",
"Description",
"Remarks",
"PHY Data Structures",
"PibValue_t Union",
"C",
"Summary",
"Description",
"Remarks",
"PHY_TrxStatus_t Enum",
"C",
"Summary",
"Description",
"Remarks",
"PHY_TrxState_t Enum",
"C",
"Summary",
"Description",
"Remarks",
"PHY_SleepMode_t Enum",
"C",
"Summary",
"Description",
"Remarks",
"PHY_Retval_t Enum",
"C",
"Summary",
"Description",
"Remarks",
"PHY_CSMAMode_t Enum",
"C",
"Summary",
"Description",
"Remarks",
"PHY_ContinuousTxMode_t Enum",
"C",
"Summary",
"Description",
"Remarks",
"PHY_ConfigParam_t Enum",
"C",
"Summary",
"Description",
"Remarks",
"Platform Abstraction Layer",
"PAL Timer",
"PAL_GetCurrentTime Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PAL_Init Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PAL_TimerGetId Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PAL_TimerDelay Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PAL_TimerIsRunning Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PAL_TimerStart Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PAL_TimerStop Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"PAL Timer Configuration",
"Resource Management",
"Buffer Management Module",
"bmm_buffer_init Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"bmm_buffer_alloc Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"bmm_buffer_free Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"Queue Management Module",
"qmm_queue_init Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"qmm_queue_append Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"qmm_queue_read Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"qmm_queue_remove Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"qmm_queue_flush Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"Microchip Information",
"The Microchip Website",
"Product Change Notification Service",
"Customer Support",
"Microchip Devices Code Protection Feature",
"Legal Notice",
"Trademarks",
"Quality Management System",
"Worldwide Sales and Service"];

var SearchInfo = [" Introduction  Microchip IEEE 802 15 4 PHY Library API provides interface to the Application / MAC layer to use the transceiver functionality of PIC32CXBZ2/WBZ45 devices This document provides information on how to configure and enable the functionalities of the API software A general description of each API is provided including the functionalities syntax responses and an example The API description defines the parameter with its type range (valid /acceptable values) the default value (when available) and the factory programmed value (when applicable)  ",
							" Features  Microchip IEEE 802 15 4 PHY Library has provides   Interface to enable wireless subsystem of PIC32CXBZ2 devices  Exposes Transceiver specific functionalites over set of APIs  Enables multiprotocol support  Enables RTOS support  Uses MPLABx MCC+Harmony 3 drivers/PLIBs for development   ",
							" PHY Architecture  The standalone IEEE 802 15 4 MAC and PHY stack architecture follows the layered approach and its depicted below   The main stack components are   PAL Layer (Platform Abstraction Layer)  PHY Layer (Physical Layer as Library)  MAC Layer (MAC Core Layer including MAC APIs)   ",
							" PHY Layer Introduction  The physical layer contains the transceiver specific functionalities as mentioned as the requirements of IEEE 802 15 4 specification It gives the interface to the MAC core layer which is independent of the underlying transceiver  Besides that the PHY layer provides the set of APIs which can be used to interface a basic application  The following are the components of Physical Layer   Frame Transmission Unit (including automatic frame retries)  Frame reception unit (including automatic acknowledgment handling)  State machine  PHY PIB storage  CSMA module  Energy detection  Power management  Interrupt handling  Initialization and Reset   The PHY layer uses the services of PAL layer for its operation The frame transmission unit generates and transmits the frames The Frame reception unit reads incoming frame and uploads in to the PHY incoming frame queue  The PHY layer handles the incoming frame and invokes the receive callback function of the upper layer (Application or MAC) PHY layer is controlled by the PHY state machine CSMA module is used for channel access The PIB attributes related to PHY are stored in the PHY PIB storage    ",
							" PHY Basic Functionalities  PHY Layer is responsible for  Transmission of a packet  Reception of a packet  Energy detection on single channel  Link quality indication  Clear channel accessment  Channel selection  Activation/Deactivation of a transceiver   ",
							" Transceiver Feature Access PHY Layer provides the access to following features of Transceiver   Configurable PSDU datarate - 250 Kbps 500 Kbps 1Mbps 2Mbps  Tx Outpower up to +12 dBm  Hardware assisted MAC - Auto retry auto acknowledgment channel access back-off  Programmable Rx mode  -103 dBm - Continuous Rx and Promiscuous Mode  -98 dBm - RPC (Reduced Power consumption Mode   Continuous Transmission support - For certification usecases  Error detection - CRC-16 computation  Antenna Diversity   ",
							" PHY APIs  PHY Library APIs are listed below           S No  API Name  Description  API Type    1  PHY_TaskHandler()   PHY Task handling  This function  -Checks and allocates the receive buffer  -Processes the PHY incoming frame queue  -Implements the PHY state machine   NA    2  PHY_Init ()   Initializes the PHY layer  This function is called to initialize the PHY The transceiver is initialized interrupt handlers are set Arbiter mode is initialized the PHY PIBs are set to their default values and PHY state machine is set to PHY_IDLE state   Synchronous    3  PHY_Reset ()  Resets the PHY state machine and sets the default PIB value if requested  Synchronous    4  PHY_EdStart (uint8_t scanDuration)  This function runs the ED scan for the scan duration specified  Asynchronous    5  PHY_EdEndCallback (uint8_t eneryLevel)  User callback function for finished ED scan  NA    6  PHY_PibGet (uint8_t attribute uint8_t * value)  This function is called to retrieve the transceiver information base attributes  Synchronous    7  PHY_PibSet (uint8_t attribute PibValue_t *value)  This function is called to set the transceiver information base attributes  Synchronous    8  PHY_RxEnable (uint8_t state)   Switches receiver on or off  This function switches the receiver on (PHY_STATE_RX_ON) or off (PHY_STATE_TRX_OFF)   Asynchronous    9  PHY_RxFrameCallback (frame_info_t *rx_frame)  User call back function for frame reception  NA    10  PHY_TxFrame (PHY_FrameInfo_t *txFrame PHY_CSMAMode_t csmaMode bool performFrameRetry)   Requests to PHY to transmit frame  This function is called by the upper layer to deliver a frame to the PHY to be transmitted by the transceiver   Asynchronous    11  PHY_TxDoneCallback (PHY_Retval_t status PHY_FrameInfo_t *frame)  User call back function for frame transmission  NA    12  PHY_TrxSleep ()  Sets the transceiver to sleep  Synchronous    13  PHY_TrxWakeup()  Wakes up the transceiver from sleep  Synchronous    14  PHY_CCAPerform ()   Performs the CCA request  This function performs a CCA request and returns the channel status as PHY_IDLE or PHY_BUSY   Synchronous    15  PHY_EdSample()  Performs Single ED measurement  Synchronous    16  PHY_ConfigRxSensitivity (uint8_t rxSensVal)  Sets the RX Sensitivity value in the Transceiver  Synchronous    17  PHY_StartContinuousTransmit ()  Starts the continuous transmit in the Transceiver  Synchronous    18  PHY_StopContinuousTransmit ()  Stops the continuous transmit in the Transceiver  Synchronous    19  PHY_ConfigTxPwr (uint8_t txPower)  Sets the Tx power in Transceiver  Synchronous    20  PHY_ConfigAntennaDiversity (bool div_ctrl uint8_t ant_ctrl)  Enables/Disables the Antenna Diversity and sets the Antenna to be used for Transmission  Synchronous    21  PHY_ConfigRxRPCMode ()  Enables the Receiver RPC (Reduced Power Consumption) mode  Synchronous    22  PHY_ConfigRxPromiscuousMode ()  Enables Rx Promiscuous mode  Synchronous    23  PHY_ConfigAutoAck()   Enable/Disables the Automatic Acknowledgment after reception  Synchronous    24  PHY_ConfigReservedFrameFiltering()  Configures TRX for receiving reserved frame  Synchronous    25  PHY_GetTrxConfig ()  To read a current setting of particular transceiver parameter  Synchronous    26  PHY_GetTrxStatus ()  Returns the current status of the Transceiver  Synchronous    27  PHY_GetRSSIBaseVal()  Get RSSI base value of TRX  Synchronous    28  PHY_GetSWVersion()  To Get the current Software version of PHY  Synchronous    29  PHY_ConvertTxPwrRegValToDbm  To convert the Tx Power Register index value to dbm Value  Synchronous       ",
							" PHY_TaskHandler Function ",
							" C void PHY_TaskHandler ( void ) ",
							" Summary PHY Task Handling routine ",
							" Description This function Checks and allocates the receive buffer Processes the PHY incoming frame queue Implements the PHY state machine Invokes the PHY user callback functions ",
							" Precondition PHY_Init should be called before calling this function ",
							" Parameters None ",
							" Returns None ",
							" Example PHY_TaskHandler(); ",
							" Remarks This routine must be called from the RTOS Task function incase of any RTOS is used For Baremetal implementation This function should be called in a while loop to get the callback from PHY layer for received frame transmitted frame status and ED completion ",
							" PHY_Init Function ",
							" C PHY_Retval_t PHY_Init( void ) ",
							" Summary Initialization of PHY Layer ",
							" Description This function is called to initialize the PHY layer The transceiver is initialized and it will be in PHY_STATE_TRX_OFF the PHY PIBs are set to their default values PAL layer is initialized ",
							" Precondition SYS_Load_Cal(WSS_ENABLE_ZB) function of device support library should be called before calling this function ",
							" Parameters None ",
							" Returns PHY_SUCCESS - If the transceiver state is changed to TRX_OFF PHY_FAILURE - Otherwise ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; retVal = PHY_Init(); if (PHY_SUCCESS = retVal) { while(1); } ",
							" Remarks This routine must be called before any of the PHY function is called ",
							" PHY_Reset Function ",
							" C PHY_Retval_t PHY_Reset( bool setDefaultPibs ) ",
							" Summary Resets the PHY Layer ",
							" Description This function is called to Resets PHY state machine and sets the default PIB values if requested ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description setDefaultPibs Defines whether PIB values need to be set to its default values ",
							" Returns PHY_SUCCESS - If the transceiver state is changed to TRX_OFF and PIBs are set to their default value PHY_FAILURE - Otherwise ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; bool setDefault = false; retVal = PHY_Reset(setDefault); if (PHY_SUCCESS = retVal) { while(1); } ",
							" Remarks None ",
							" PHY_PibSet Function ",
							" C PHY_Retval_t PHY_PibSet(uint8_t attribute PibValue_t *value) ",
							" Summary Sets the PHY PIB attribute with value ",
							" Description This function is called to set the transceiver information base attributes The list of PHY PIB attributes its default values and range are described in the above table For more information refer ieee_phy_const h file ",
							" Precondition PHY_init() should have been called before calling this function ",
							" Parameters Param Description attribute PHY infobase attribute ID value Pointer to the PHY infobase attribute value to be set ",
							" Returns PHY_UNSUPPORTED_ATTRIBUTE - if the PHY info base attribute is not found PHY_BUSY - If the PHY is not in PHY_IDLE state An exception is macBeaconTxTime which can be accepted by PHY even if PHY is not in PHY_IDLE state PHY_SUCCESS - If the attempt to set the PIB attribute was successful PHY_TRX_ASLEEP - If trx is in SLEEP mode and access to trx is required ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; uint8_t phyChannel = 15; uint8_t shortAddr = 0x1234; PibValue_t pibValue; // Setting Current channel pibValue pib_value_8bit = phyChannel; retVal = PHY_PibSet(phyCurrentChannel pibValue); if(PHY_SUCCESS == retVal) { //Channel is configured } //Setting short Address pibValue pib_value_16bit = shortAddr; retVal = PHY_PibSet(macShortAddr pibValue); if(PHY_SUCCESS == retVal) { //Short Address is configured } ",
							" Remarks None ",
							" PHY_PibGet Function ",
							" C PHY_Retval_t PHY_PibGet(uint8_t attribute uint8_t *value) ",
							" Summary Gets a PHY PIB attribute ",
							" Description This function is called to retrieve the transceiver information base attributes The list of PHY PIB attributes its default values and range are described in the above table For more information refer ieee_phy_const h file ",
							" Precondition PHY_init() should have been called before calling this function ",
							" Parameters Param Description attribute PHY infobase attribute ID value Pointer to the PHY infobase attribute value ",
							" Returns PHY_UNSUPPORTED_ATTRIBUTE - If the PHY infobase attribute is not found PHY_SUCCESS - otherwise ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; uint8_t phyChannel; uint8_t shortAddr; // Getting Current channel retVal = PHY_PibGet(phyCurrentChannel phyChannel); if(PHY_SUCCESS == retVal) { printf(\" r n PHY Current Channel - %d\" phyChannel ); } //Getting short Address retVal = PHY_PibGet(macShortAddr shortAddr); if(PHY_SUCCESS == retVal) { printf(\" r n Device short addr - 0x%x\" shortAddr ); } ",
							" Remarks None ",
							" PHY_TxFrame Function ",
							" C PHY_Retval_t PHY_TxFrame(PHY_FrameInfo_t *txFrame PHY_CSMAMode_t csmaMode bool performFrameRetry) ",
							" Summary Request to PHY to transmit frame ",
							" Description This function is called by the upper layer (MAC/Application) to deliver a frame to the PHY to be transmitted by the transceiver ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description Comments txFrame Pointer to the PHY_FrameInfo_t structure or to frame array to be transmitted  txFrame- mpdu Pointer to the PHY Payload mpdu should hold the length of the payload(N) + 1 (for length field length)  txFrame- mpdu Hold the phyPayload csmaMode Indicates mode of csma-ca to be performed for this frame  NO_CSMA_NO_IFS Immediate Tx and SIFS(Short InterFrameSpacing) between subsequent frames  NO_CSMA_WITH_IFS Immediate Tx and LIFS (Long InterFrameSpacing) between subsequent frames  CSMA_UNSLOTTED Hardware CSMA will be performed before packet transmission with number of retries configured  CSMA_SLOTTED Hardware CSMA will be performed  Beacon Enabled network - Currently not supported by PHY performFrameRetry Indicates whether to retries are to be performed for this frame  true SW retry will be performed for macMaxFrameRetries value  false SW retry is disabled ",
							" Returns PHY_SUCCESS - If PHY has accepted the data from the MAC for frame transmission PHY_BUSY - If PHY is busy servicing the previous MAC request ",
							" Example uint8_t txBuffer[LARGE_BUFFER_SIZE]; uint8_t txData[] = \"Wireless \"; PHY_CSMAMode_t csmaMode = CSMA_UNSLOTTED; bool performRetry = true; PHY_FrameInfo_t txFrame; txFrame mpdu = txBuffer; txBuffer[0] = sizeof(txData); memcpy((uint8_t *) txBuffer[1] txData sizeof(txData)); if(PHY_SUCCESS == PHY_TxFrame( txFrame csmaMode performRetry)) { //Frame transmission initiated successfully } ",
							" Remarks The return status of PHY_SUCCESS from PHY_TxFrame function indicate PHY layer accepted the request for initiation of transmission The actual status of Transmission will be reported to higher layer through User callback function (PHY_TxDoneCallback) This function will give the status as SUCCESS CSMA_FAILURE RADIO_UNAVAILABLE or NO_ACK for the previous request ",
							" PHY_TxDoneCallback Function ",
							" C void PHY_TxDoneCallback(PHY_Retval_t status PHY_FrameInfo_t *frame) ",
							" Summary User callback function for the transmission of a frame ",
							" Description This callback function SHOULD be defined by the upper layer(Application/MAC) for getting the status of last transmitted packet Weak implementation for this function is available in phy_tx_done_cb c file ",
							" Precondition This is a Asynchronous function call for the transmission of a frame ",
							" Parameters Param Description Comment status Status of frame transmission attempt  PHY_SUCCESS The transaction was responded to by a valid ACK or if no ACK is requested after a successful frame transmission  PHY_FRAME_PENDING Equivalent to SUCCESS and indicating that the Frame Pending bit of the received acknowledgment framas set  PHY_CHANNEL_ACCESS_FAILURE Channel is still busy after attempting MAX_CSMA_RETRIES of CSMA-CA  PHY_NO_ACK No acknowledgement frames were received during all retry attempts  PHY_FAILURE Transaction not yet finished  PHY_RF_REQ_ABORTED RF is busy performing Higher priority BLE task and the transmission is aborted  PHY_RF_UNAVAILABLE RF is currently unavailable for 15 4 subsystem frame Pointer to the PHY_FrameInfo_t structure or to frame array being transmitted  txFrame- mpdu Pointer to the PHY Payload mpdu should hold the length of the payload(N) + 1 (for length field length)  txFrame- mpdu Hold the phyPayload ",
							" Returns None ",
							" Example void PHY_TxDoneCallback(PHY_Retval_t status PHY_FrameInfo_t *frame) { // Keep compiler happy status = status; frame = frame; } ",
							" Remarks This function will be invoked by the PHY layer for the transmission of a packet or transmissionfailure reasons ",
							" PHY_RxEnable Function ",
							" C PHY_TrxStatus_t PHY_RxEnable(PHY_TrxState_t state) ",
							" Summary Switches receiver on or off ",
							" Description This function switches the receiver on (PHY_STATE_RX_ON) or off (PHY_STATE_TRX_OFF) ",
							" Precondition PHY_init() should have been called before calling this function ",
							" Parameters Param Description state State of the Transceiver to be set  PHY_STATE_RX_ON - Transceiver will be put into Receive state  PHY_STATE_TRX_OFF -Transceiver will be put into OFF state ",
							" Returns PHY_TRX_OFF - If receiver has been switched off or PHY_RX_ON - otherwise ",
							" Example PHY_TrxStatus_t trxStatus; PHY_TrxState_t trxState = PHY_STATE_RX_ON; trxStatus = PHY_RxEnable(trxState); if(PHY_RX_ON == trxStatus) { //TRX is in receive state } ",
							" Remarks None ",
							" PHY_RxFrameCallback Function ",
							" C void PHY_RxFrameCallback(PHY_FrameInfo_t *rxFrame) ",
							" Summary User callback function for the reception of a frame ",
							" Description This callback function SHOULD be defined by the upper layer(Application/MAC) for getting the received frame details ",
							" Precondition This is a Asynchronous function call for the reception of a frame ",
							" Parameters Param Description rxFrame Pointer to received frame structure of type PHY_FrameInfo_t or to received frame array  rxFrame- buffer_header - BMM Buffer Header of the frame  rxFrame- mpdu - Actual MPDU comprises of  mpdu - Payload Length(N)  mpdu - Payload mpdu - LQI of received packet  mpdu - ED_LEVEL of received packet ",
							" Returns None ",
							" Example uint8_t rxBuffer[LARGE_BUFFER_SIZE]; uint8_t frameLen frameLQI frameED; int8_t frameRSSI; void PHY_RxFrameCallback(PHY_FrameInfo_t *frame) { printf(\" n--RxCallbackreceived--\"); frameLen = frame- mpdu[0]; //Copy the payload memcpy(rxBuffer (uint8_t *) (frame- mpdu[1]) frameLen); //Copy the LQI frameLQI = frame- mpdu[frameLen+LQI_LEN]; //Copy the RSSI frameED = frame- mpdu[frameLen+LQI_LEN+ED_VAL_LEN]; frameRSSI = (int8_t)(frameED + PHY_GetRSSIBaseVal()); // free the buffer that was used for frame reception bmm_buffer_free((buffer_t *)(frame- buffer_header)); } ",
							" Remarks bmm_buffer_free SHOULD be called in the PHY_RxFrameCallback() for reusing the buffer for reception Otherwise no buffers will be availble for reception Number of buffers can be increased by changing the NUMBER_OF_LARGE_PHY_BUFS in stack_config h By default the value is 3 If the buffer is not freed upon receiving the packet transceiver can receive upto NUMBER_OF_LARGE_PHY_BUFS (3) frames only ",
							" PHY_EdStart Function ",
							" C PHY_Retval_t PHY_EdStart(uint8_t scanDuration) ",
							" Summary Starts Energy Detection Scan ",
							" Description This function starts an ED Scan for the scan duration specified by the upper layer Actual ED result of Energy level on current channel will be indicated by PHY_EdEndCallback(eneryLevel) Scan duration formula: ",
							" aBaseSuperframeDuration x (2^SD + 1) symbols where SD - scanDuration parameter (0 - 14) ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description scanDuration Specifies the ED scan duration in symbols  Range - (0 to 14) ",
							" Returns PHY_SUCCESS - ED scan is started successfully PHY_BUSY - PHY is busy servicing the previous request PHY_TRX_ASLEEP - Transceiver is currently sleeping wakeup the transceiver using PHY_TrxWakeup() function PHY_FAILURE - otherwise ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; uint8_t scanDurationSym = 1; retVal = PHY_EdStart(scanDurationSym); if (PHY_SUCCESS = retVal) { //ED scan cannot be started at this moment } ",
							" Remarks PHY_EdEndCallback(energyLevel) will be called after scanning the current channel for a time period of aBaseSuperframeDuration x (2 scanDuration + 1) symbols For scanDuration of value 0 ScanTime = 960 x(2 0 +1) = 1920 symbols = 30720 us ",
							" PHY_EdEndCallback Function ",
							" C void PHY_EdEndCallback(uint8_t energyLevel) ",
							" Summary User callback function for Energy detection ",
							" Description This function SHOULD be defined by the upperlayer (Application/MAC layer) in order to get the energyLevel on the current channel which is being scanned for a period of scanDuration symbols ",
							" Precondition This is an Asynchronous function call for the energy scan complete ",
							" Parameters Param Description energyLevel Measured energy level during ED Scan With energy_level the RF input power can be calculated as follows  PRF = RSSI_BASE_VAL + 1 x energy_level ",
							" Returns None ",
							" Example void PHY_EdEndCallback(uint8_t energyLevel) { int8_t energyLeveldBm = (int8_t) (PHY_GetRSSIBaseVal() + energyLevel); energyLevel = energyLevel; } ",
							" Remarks None ",
							" PHY_EdSample Function ",
							" C uint8_t PHY_EdSample(void) ",
							" Summary Perform a single ED measurement on current channel ",
							" Description This function is used to measure the energy level on current channel ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters None ",
							" Returns edValue - Result of the measurement ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; uint8_t phyChannel = 15; uint8_t edLevel; int8_t pwrDbm; PibValue_t pibValue; // Setting Current channel pibValue pib_value_8bit = phyChannel; retVal = PHY_PibSet(phyCurrentChannel pibValue); if(PHY_SUCCESS == retVal) { //Take the Ed sample edLevel = PHY_EdSample(); //Convert the energy level to input power in Dbm pwrDbm = (int8_t)(edLevel + PHY_GetRSSIBaseVal()); } ",
							" Remarks PHY_EdSample scans the channel for 8 symbols(128us) and returns the energy level ",
							" PHY_CCAPerform Function ",
							" C PHY_Retval_t PHY_CCAPerform(void) ",
							" Summary Perform a clear channel assessment ",
							" Description This function is used to perform a clear channel assessment on current channel using configured CCA mode (can be set using PHY_PibSet of phyCCAMode) This results in the status of channel is current busy or Idle The different CCA modes supported by Transceiver are The CCA mode CCA Mode 1: Energy above threshold CCA shall report a busy medium upon detecting any energy above the ED threshold CCA Mode 2: Carrier sense only CCA shall report a busy medium only upon the detection of a signal with the modulation and spreading characteristics of IEEE 802 15 4 This signal may be above or below the ED threshold CCA Mode 3: Carrier sense with energy above threshold CCA shall report a busy medium only upon the detection of a signal with the modulation and spreading characteristics of IEEE 802 15 4 with energy above the ED threshold ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters None ",
							" Returns PHY_CHANNEL_IDLE - The CCA attempt has detected an idle channel PHY_CHANNEL_BUSY - The CCA attempt has detected a busy channel ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; uint8_t phyChannel = 15; PibValue_t pibValue; bool isChIdle = false; // Setting Current channel pibValue pib_value_8bit = phyChannel; retVal = PHY_PibSet(phyCurrentChannel pibValue); if(PHY_SUCCESS == retVal) { //Take the Ed sample retVal = PHY_CCAPerform(); if (PHY_CHANNEL_IDLE == retVal) { isChIdle = true; } } ",
							" Remarks None ",
							" PHY_StartContinuousTransmit Function ",
							" C void PHY_StartContinuousTransmit(PHY_ContinuousTxMode_t txMode bool randomContent) ",
							" Summary Starts continuous transmission on current channel ",
							" Description This function is called to start the continuous transmission on current channel ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description txMode Mode of continuous transmission  CW_MODE - Continuous Wave mode to transmit the signal at Fc + - 0 5MHz frequency  PRBS_MODE - PRBS mode to Pseudorandom Binary Sequence frame continuously randomContent Use random content if true ",
							" Returns None ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; uint8_t phyChannel = 15; PHY_ContinuousTxMode_t txMode = CW_MODE; bool useRandomContent = false; PibValue_t pibValue; // Setting Current channel pibValue pib_value_8bit = phyChannel; retVal = PHY_PibSet(phyCurrentChannel pibValue); if(PHY_SUCCESS == retVal) { //Start continuous tx in CW mode PHY_StartContinuousTransmit(txMode useRandomContent); } ",
							" Remarks None ",
							" PHY_StopContinuousTransmit Function ",
							" C void PHY_StopContinuousTransmit(void) ",
							" Summary Stops the continuous transmission on the current channel ",
							" Description This function is called to stop the continuous transmission ",
							" Precondition PHY_Init() should have been called before calling this function This function will stop the continuous transmission which is started by PHY_StartContinuousTransmit()function ",
							" Parameters None ",
							" Returns None ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; uint8_t phyChannel = 15; PHY_ContinuousTxMode_t txMode = PRBS_MODE; bool useRandomContent = true; bool contTxStarted = false; PibValue_t pibValue; // Setting Current channel pibValue pib_value_8bit = phyChannel; retVal = PHY_PibSet(phyCurrentChannel pibValue); if(PHY_SUCCESS == retVal) { //Start continuous tx in CW mode PHY_StartContinuousTransmit(txMode useRandomContent); contTxStarted = true; } if(contTxStarted) { //Stop continuous tx PHY_StopContinuousTransmit(); } ",
							" Remarks When continuous tx is stopped the PHY_Reset function is called User has to reconfigure the configuration parameters (PHY_ConfigParam_t) which are set by application ",
							" PHY_TrxSleep Function ",
							" C PHY_Retval_t PHY_TrxSleep(PHY_SleepMode_t mode) ",
							" Summary Sets the transceiver to sleep ",
							" Description This function sets the transceiver to sleep or deep sleep state ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description mode Defines sleep mode of transceiver SLEEP or DEEP_SLEEP ",
							" Returns PHY_BUSY - The transceiver is busy in TX or RX PHY_SUCCESS - The transceiver is put to sleep PHY_TRX_ASLEEP - The transceiver is already asleep ",
							" Example PHY_SleepMode_t sleepMode = SLEEP_MODE_1; bool trxSleepStatus = false; if (PHY_SUCCESS == PHY_TrxSleep(sleepMode)) { trxSleepStatus = true; } ",
							" Remarks When TRX is put into DeepSleep the TRX registers are reset and it will hold default values PIB values are getting written by PHY layer when Wakeup function is called User has to reconfigure the configuration parameters (PHY_ConfigParam_t) which are set by application This procedure is not needed for SLEEP mode as the TRX register values are retained ",
							" PHY_TrxWakeup Function ",
							" C PHY_Retval_t PHY_TrxWakeup(void) ",
							" Summary Wakes up the transceiver from sleep ",
							" Description This function awakes the transceiver from sleep state ",
							" Precondition PHY_TrxSleep() should have been called before calling this function ",
							" Parameters None ",
							" Returns PHY_TRX_AWAKE - The transceiver is already awake PHY_SUCCESS - The transceiver is woken up from sleep PHY_FAILURE - The transceiver did not wake-up from sleep ",
							" Example PHY_SleepMode_t sleepMode = SLEEP_MODE_1; bool trxSleepStatus = false; // Set Transceiver to sleep if (PHY_SUCCESS == PHY_TrxSleep(sleepMode)) { trxSleepStatus = true; } //wakeup the transceiver if (PHY_SUCCESS == PHY_TrxWakeup()) { trxSleepStatus = false; } ",
							" Remarks When TRX is put into DeepSleep the TRX registers are reset and it will hold default values PIB values are getting written by PHY layer when Wakeup function is called User has to reconfigure the configuration parameters (PHY_ConfigParam_t) which are set by application This procedure is not needed for SLEEP mode as the TRX register values are retained ",
							" PHY_ConfigAutoAck Function ",
							" C PHY_Retval_t PHY_ConfigAutoAck(bool enableAACK) ",
							" Summary Configures TRX for auto acknowledging the reserved frame ",
							" Description The function is used to configure the automatic acknowledgment from Transceiver after packet reception By default Automatic Acknowledgement after reception is enabled ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description nableAACK true - To enable automatic acknowledgment after reception  false - to disable the automatic acknowledgment after reception ",
							" Returns PHY_SUCCESS - If trx is configured correctly PHY_FAILURE - otherwise ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; bool isEnableAACK = true; retVal = PHY_ConfigAutoAck(isEnableAACK); if(PHY_SUCCESS == retVal) { //Trx is configured to auto acknowledge for the received packet } ",
							" Remarks None ",
							" PHY_ConfigReservedFrameFiltering Function ",
							" C PHY_Retval_t PHY_ConfigReservedFrameFiltering(bool recReservedFrame bool bypassFrameFilter ) ",
							" Summary Configures TRX for receiving reserved frame ",
							" Description This function is used to configure the trx for receiving the reserved frame type frames and to enable/disable the frame filtering ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description recReservedFrame true to enable the reception of reserved frame types acknowledgment after reception bypassFrameFilter true to bypass the frame filtering at the hardware level like data frame as specified in IEEE specification ",
							" Returns PHY_SUCCESS If trx is configured correctly PHY_FAILURE otherwise ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; bool rxResFrame = true; bool bypassFrameFiltering = false; retVal = PHY_ConfigReservedFrameFiltering(rxResFrame bypassFrameFiltering); if(PHY_SUCCESS == retVal) { //Trx is configured to receive the reserved frame and to do the frame //filtering as stated in IEEE Spec } ",
							" Remarks None ",
							" PHY_ConfigRxPromiscuousMode Function ",
							" C PHY_Retval_t PHY_ConfigRxPromiscuousMode(bool promCtrl) ",
							" Summary Configures RX promiscuous mode ",
							" Description This function is used to enable the RX promiscuous mode The TRX will receive all frames even with FCS failure PHY layer will discard the CRC invalid packet and TRX will not acknowledge even ack is requested by the received packet(auto ack is disabled in this mode) ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description promCtrl true to enable promiscuous mode  false to disable promiscuous mode ",
							" Returns PHY_SUCCESS - If promCtrl bits are configured correctly PHY_FAILURE - otherwise ",
							" Example bool promCtrl = true; // Enable Promiscuous mode PHY_ConfigRxPromiscuousMode(promCtrl); // To get the PDT level configured PHY_GetTrxConfig(AACK_PROMSCS_MODE promCtrl); ",
							" Remarks None ",
							" PHY_ConfigRxRPCMode Function ",
							" C PHY_Retval_t PHY_ConfigRxRPCMode(uint8_t rxRPCEnable) ",
							" Summary Configures the reduced power consumption mode ",
							" Description The function is used to configure the reduced power consumption mode of the receiver ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description rxRPCEnable 0x01 - To Enable the rxRPC mode  0x00 - To disable the rx RPC mode ",
							" Returns PHY_SUCCESS If trx is configured correctly PHY_FAILURE otherwise ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; uint8_t rxRPCEnable = 0x01; retVal = PHY_ConfigRxRPCMode(rxRPCEnable); if(PHY_SUCCESS == retVal) { //Trx is configured to reduced power consumption mode } ",
							" Remarks None ",
							" PHY_ConfigRxSensitivity Function ",
							" C PHY_Retval_t PHY_ConfigRxSensitivity(uint8_t pdtLevel) ",
							" Summary Configures receiver sensitivity level This is used to desensitize the receiver ",
							" Description This function is used to reduce the sensitivity of the receiver The input pdtLevel(Power Detect Level) desensitize the receiver such that frames with an RSSI level below the pdtLevel threshold level (if pdtLevel 0) are not received For a pdtLevel 0 value the threshold level can be calculated according to the following formula: ",
							" PRF RSSIBASE_VAL + 3 x (pdtLevel - 1) ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description pdtLevel 0 to 15 levels of rx sensitivity(RX_PDT_LEVEL) ",
							" Returns PHY_SUCCESS - If pdtLevel bits are configured correctly PHY_FAILURE - otherwise ",
							" Example uint8_t pdtLevel = 0x03; // Reduce the PDT level PHY_ConfigRxSensitivity(pdtLevel); // To get the PDT level configured PHY_GetTrxConfig(RX_SENS pdtLevel); ",
							" Remarks None ",
							" PHY_ConfigTxPwr Function ",
							" C PHY_Retval_t PHY_ConfigTxPwr(bool type int8_t pwrValue) ",
							" Summary Configures the TX Power in Transceiver ",
							" Description This function is used to configure the Transmit power of the transceiver ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description type PWR_REGISTER_VALUE or PWR_DBM_VALUE pwrValue Index of the power register value (0-15) or Power value in dBm (-14dBm to 12dBm) ",
							" Returns PHY_SUCCESS - If pwrValue bit is configured correctly PHY_FAILURE - Otherwise ",
							" Example bool pwrType = PWR_REGISTER_VALUE; uint8_t pwrIndex = 0x00; bool configStatus = false; //Set Tx Power with Register Index value if (PHY_SUCCESS == PHY_ConfigTxPwr(pwrType int8_t (pwrIndex))) { configStatus = true; } //Set Tx Power with dBm value int8_t pwrDbm = -12; pwrType = PWR_DBM_VALUE; if (PHY_SUCCESS == PHY_ConfigTxPwr(pwrType int8_t (pwrDbm))) { configStatus = true; } uint8_t pwrReg; // To get the tx power index value configured in the TRX PHY_GetTrxConfig(TX_PWR pwrReg); ",
							" Remarks None ",
							" PHY_ConvertTxPwrRegValToDbm Function ",
							" C PHY_Retval_t PHY_ConvertTxPwrRegValToDbm(uint8_t regValue int8_t *dbmValue) ",
							" Summary To convert the Tx Power Register index value to dbm Value ",
							" Description This function is used to convert Tx Power Register index value to dbm Value ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description regVaue Index of the Power register value (Range 0-15) dbmValue Corresponding dbm value to the Pwr register value ",
							" Returns PHY_SUCCESS - If reg value can be converted into dBm value PHY_FAILURE - If regVaue is holding the invalid value ",
							" Example uint8_t pwrRegIndex = 0x04; int8_t pwrDbm; // To get the dBm value corresponding to power register index PHY_ConvertTxPwrRegValToDbm(pwrRegIndex pwrDbm); ",
							" Remarks None ",
							" PHY_ConfigAntennaDiversity Function ",
							" C PHY_Retval_t PHY_ConfigAntennaDiversity(bool divCtrl uint8_t antCtrl) ",
							" Summary Configures antenna diversity and selects antenna ",
							" Description This function is used to enable the Antenna Diversity feature and to select the antenna path if the feature is disabled Antenna Diversity uses two antennas to select the most reliable RF signal path To ensure highly independent receive signals on both antennas the antennas should be carefully separated from each other If a valid IEEE 802 15 4 frame is detected on one antenna this antenna is selected for reception Otherwise the search is continued on the other antenna and vice versa ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description divCtrl true/false to enable/disable antenna diversity algorithm antCtrl 0 or 3 when antenna diversity is enabled 1 or 2 to select antenna 1 or antenna 2 ",
							" Returns PHY_SUCCESS - If Antenna Diversity/ Control bits are configured correctly PHY_FAILURE - otherwise ",
							" Example bool antDiv = ANTENNA_DIVERSITY_DISABLE; uint8_t antennaSel = ANTENNA_CTRL_1; // Antenna Diversity is disabled and Antenna 1 is selected for rx/tx path PHY_ConfigAntennaDiversity(antDiv antennaSel); // To get the antenna diversity value configured in the TRX PHY_GetTrxConfig(ANT_DIV antDiv); // To get antenna selected for rx/tx PHY_GetTrxConfig(ANT_SELECT antennaSel); ",
							" Remarks None ",
							" PHY_GetTrxStatus Function ",
							" C PHY_TrxStatus_t PHY_GetTrxStatus(void) ",
							" Summary Returns the current status of the Transceiver ",
							" Description This function gets the status of the transceiver ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters None ",
							" Returns PHY_TRX_OFF - The transceiver is in TRX_OFF state PHY_RX_ON - The transceiver is in receive state PHY_TX_ON - The transceiver is in Transmit state PHY_BUSY_RX - The transceiver currently receiving the packet PHY_BUSY_TX - The transceiver is currently transmitting the packet PHY_TRX_SLEEP - The transceiver is in sleep state PHY_DEEP_SLEEP - The transceiver is in Deep sleep state ",
							" Example PHY_TrxStatus_t trxStatus; //Gets the current status of trx trxStatus = PHY_GetTrxStatus(); ",
							" Remarks None ",
							" PHY_GetRSSIBaseVal Function ",
							" C int8_t PHY_GetRSSIBaseVal(void) ",
							" Summary Get RSSI base value of TRX ",
							" Description This function is called to get the base RSSI value for respective radios ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters None ",
							" Returns Integer contains RSSI value ",
							" Example int8_t trxBaseRSSI; // Get RSSI base value of TRX trxBaseRSSI = PHY_GetRSSIBaseVal(); ",
							" Remarks None ",
							" PHY_GetTrxConfig Function ",
							" C PHY_Retval_t PHY_GetTrxConfig(PHY_ConfigParam_t parameter uint8_t *paramValue) ",
							" Summary To read a current setting of particular transceiver parameter ",
							" Description The function is used to read the current of particular parameter The following parameters can be read from TRX | Param | Description | |:----- |:----------- | |ANT_DIVERSITY|Antenna Diversity| |ANT_SELECT|Antenna Configured - ANTENNA_1/ANTENNA_2| |ANT_CTRL|Antenna Control| |AACK_PROMSCS_MODE|Promiscuous Mode| |TX_PWR|Tx Power Configured| |RX_SENS|Rx Sensitivity| |RX_RPC|RX Reduced Power Consumption| |RX_AUTO_ACK|Automatic acknowledgement| |RX_RESERVED_FRAME|Reserved frame reception| |FILTER_RESERVED_FRAME|Filter reserved frame| ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters Param Description parameter Type of the parameter to be read paramValue Pointer to the current parameter value ",
							" Returns PHY_INVALID_PARAMETER - If the parameter is invalid PHY_SUCCESS - otherwise ",
							" Example PHY_Retval_t retVal = PHY_FAILURE; bool promCtrl = true; // To get the promiscuous mode configured PHY_GetTrxConfig(AACK_PROMSCS_MODE (uint8_t *) promCtrl); ",
							" Remarks None ",
							" PHY_GetSWVersion Function ",
							" C uint32_t PHY_GetSWVersion(void) ",
							" Summary To Get the current Software version of PHY ",
							" Description This function is used Get the current Software version of PHY ",
							" Precondition PHY_Init() should have been called before calling this function ",
							" Parameters None ",
							" Returns 32-bit PHY SW version value ",
							" Example uint32_t phySwVersion; // Get sw version of the PHY phySwVersion = PHY_GetSWVersion(); ",
							" Remarks None ",
							" PHY PIB List  The PHY PIB comprises the attributes required to manage the PHY of a device The attributes contained in  the PHY PIB are presented in Table 2            PIB Attribute  Access  Type  Default  Range    phyCurrentChannel  Get/Set  uint8_t  11  11-26    phyChannelsSupported  Get  Uint32_t  0x07FFF800  NA    phyCurrentPage  Get/Set  uint8_t  0  0 2 16 17    phyTransmitPower  Get/Set  uint8_t  4  0-15    phyCCAMode  Get/Set  uint8_t  1  0-3    macIeeeAddress  Get/Set  Uint64_t  All 0’s  -    macShortAddress  Get/Set  Uint16_t  0xFFFF  0x0000 - 0xFFFF    macPANId  Get/Set  Uint16_t  0xFFFF  0x0000 - 0xFFFF    macMinBE  Get/Set  uint8_t  3  0-3    macMaxBE  Get/Set  uint8_t  5  3-8    macMaxCSMABackoffs  Get/Set  uint8_t  4  0-5    macMaxFrameRetries  Get/Set  uint8_t  3  0-7    macPromiscuousMode  Get/Set  bool  false  True/false    phySHRDuration  Get  uint8_t  10 Symbols  NA    phySymbolsPerOctet  Get  uint8_t  2 Symbols  NA    phyMaxFrameDuration  Get  Uint16_t  266 Symbols  NA       ",
							" phySHRDuration Macro ",
							" C #define phySHRDuration (0x06) ",
							" Summary This macro holds The duration of the synchronization header (SHR) in symbols for the current PHY ",
							" Description None ",
							" Remarks None ",
							" phyCurrentPage Macro ",
							" C #define phyCurrentPage (0x04) ",
							" Summary This macro holds current PHY channel page This is used in conjunction with phyCurrentChannel to uniquely identify the channel currently being used ",
							" Description None ",
							" Remarks None ",
							" phyChannelsSupported Macro ",
							" C #define phyChannelsSupported (0x01) ",
							" Summary This macro holds The 5 most significant bits (MSBs) (b27 b31) of phyChannelsSupported shall be reserved and set to 0 and the 27 LSBs (b0 b1 b26) shall indicate the status (1 = available 0 = unavailable) for each of the 27 valid channels (bk shall indicate the status of channel k) ",
							" Description None ",
							" Remarks None ",
							" phyCCAMode Macro ",
							" C #define phyCCAMode (0x03) ",
							" Summary This macro holds The CCA mode CCA Mode 1: Energy above threshold CCA shall report a busy medium upon detecting any energy above the ED threshold CCA Mode 2: Carrier sense only CCA shall report a busy medium only upon the detection of a signal with the modulation and spreading characteristics of IEEE 802 15 4 This signal may be above or below the ED threshold CCA Mode 3: Carrier sense with energy above threshold CCA shall report a busy medium only upon the detection of a signal with the modulation and spreading characteristics of IEEE 802 15 4 with energy above the ED threshold ",
							" Description None ",
							" Remarks None ",
							" phyMaxFrameDuration Macro ",
							" C #define phyMaxFrameDuration (0x05) ",
							" Summary This macro holds The maximum number of symbols in a frame: = phySHRDuration + ceiling( x phySymbolsPerOctet) ",
							" Description None ",
							" Remarks None ",
							" phyCurrentChannel Macro ",
							" C #define phyCurrentChannel (0x00) ",
							" Summary This macro holds The RF channel to use for all following transmissions and receptions ",
							" Description None ",
							" Remarks None ",
							" phyTransmitPower Macro ",
							" C #define phyTransmitPower (0x02) ",
							" Summary This macro holds The 2 MSBs represent the tolerance on the transmit power: 00 = 1 dB 01 = 3 dB 10 = 6 dB The 6 LSBs represent a signed integer in twos-complement format corresponding to the nominal transmit power of the device in decibels relative to 1 mW The lowest value of phyTransmitPower shall be interpreted as less than or equal to 32 dBm ",
							" Description None ",
							" Remarks None ",
							" phySymbolsPerOctet Macro ",
							" C #define phySymbolsPerOctet (0x07) ",
							" Summary This macro holds The number of symbols per octet for the current PHY ",
							" Description None ",
							" Remarks None ",
							" macMaxFrameRetries Macro ",
							" C #define macMaxFrameRetries (0x59) ",
							" Summary This macro holds The maximum number of retries allowed after a transmission failure ",
							" Description None ",
							" Remarks None ",
							" macPANId Macro ",
							" C #define macPANId (0x50) ",
							" Summary This macro holds The 16 bit identifier of the PAN on which the device is operating If this value is 0xffff the device is not associated ",
							" Description None ",
							" Remarks None ",
							" macMinBE Macro ",
							" C #define macMinBE (0x4F) ",
							" Summary This macro holds The minimum value of the backoff exponent in the CSMA-CA algorithm Note that if this value is set to 0 collision avoidance is disabled during the first iteration of the algorithm Also note that for the slotted version of the CSMACA algorithm with the battery life extension enabled the minimum value of the backoff exponent will be the lesser of 2 and the value of macMinBE ",
							" Description None ",
							" Remarks None ",
							" macMaxBE Macro ",
							" C #define macMaxBE (0x57) ",
							" Summary This macro holds The maximum value of the backoff exponent BE in the CSMA-CA algorithm ",
							" Description None ",
							" Remarks None ",
							" macMaxCSMABackoffs Macro ",
							" C #define macMaxCSMABackoffs (0x4E) ",
							" Summary This macro holds The maximum number of backoffs the CSMA-CA algorithm will attempt before declaring a channel access failure ",
							" Description None ",
							" Remarks None ",
							" macShortAddress Macro ",
							" C #define macShortAddress (0x53) ",
							" Summary This macro holds The 16 bit address that the device uses to communicate in the PAN If the device is a PAN coordinator this value shall be chosen before a PAN is started Otherwise the address is allocated by a coordinator during association A value of 0xfffe indicates that the device has associated but has not been allocated an address A value of 0xffff indicates that the device does not have a short address ",
							" Description None ",
							" Remarks None ",
							" macAckWaitDuration Macro ",
							" C #define macAckWaitDuration (0x40) ",
							" Summary This macro holds The maximum number of symbols to wait for an acknowledgment frame to arrive following a transmitted data frame This value is dependent on the currently selected logical channel For 0 = phyCurrentChannel = 10 this value is equal to 120 For 11 = phyCurrentChannel = 26 this value is equal to 54 ",
							" Description None ",
							" Remarks None ",
							" macIeeeAddress Macro ",
							" C #define macIeeeAddress (0xF0) ",
							" Summary This macro holds Private MAC PIB attribute to allow setting the MAC address in test mode ",
							" Description None ",
							" Remarks None ",
							" macPromiscuousMode Macro ",
							" C #define macPromiscuousMode (0x51) ",
							" Summary This indicates whether the MAC sublayer is in a promiscuous (receive all) mode A value of true indicates that the MAC sublayer accepts all frames received from the PHY ",
							" Description None ",
							" Remarks None ",
							" PHY Data Structures  Following are the data structures used by the PHY Layer   PHY Data Structures        Name  Type  Description      PHY_ConfigParam_t  Enum  PHY Configuration parameters supported by transceiver    PHY_FrameInfo_t  Struct  PHY_FrameInfo_t holds the data to be transmitted or the data being received by the transceiver    PHY_SleepMode_t  Enum  Sleep Modes supported by transceiver    PHY_CSMAMode_t  Enum  List of carrier sense multiple access with collision avoidance supported by PHY Layer    PHY_ContinuousTxMode_t  Enum  List of Continuous Transmission Test Modes supported by transceiver    PHY_Retval_t  Enum  List of return status for the PHY functions    PHY_TrxState_t  Enum  Enumeration for Transceiver States that can be set |    PHY_TrxStatus_t  Enum  Enumeration for current state of the Transceiver      ",
							" PibValue_t Union ",
							" C typedef union { /** PIB Attribute Bool */ bool pib_value_bool; /** PIB Attribute 8-bit */ uint8_t pib_value_8bit; /** PIB Attribute 16-bit */ uint16_t pib_value_16bit; /** PIB Attribute 32-bit */ uint32_t pib_value_32bit; /** PIB Attribute 64-bit */ uint64_t pib_value_64bit; } PibValue_t; ",
							" Summary Union of different PHY Pib value types ",
							" Description PibValue_t is used as the data type to set/get the different PHY Information Base value ",
							" Remarks None ",
							" PHY_TrxStatus_t Enum ",
							" C typedef enum phy_trx_status_tag{ /* Transceiver is in Transceiver OFF state*/ PHY_TRX_OFF = 0x08 /* Transceiver is in Receiver ON state */ PHY_RX_ON = 0x16 /* Transceiver is in Transmit ON state */ PHY_TX_ON = 0x19 /* Transceiver is currently receiving the packet*/ PHY_BUSY_RX = 0x11 /* Transceiver is currently transmitting the packet */ PHY_BUSY_TX = 0x12 /* Transceiver is in sleep state */ PHY_TRX_SLEEP = 0x0F /* Transceiver is in Deep sleep state */ PHY_TRX_DEEP_SLEEP = 0x20 }PHY_TrxStatus_t; ",
							" Summary Enumeration for current state of the Transceiver ",
							" Description Status Description PHY_TRX_OFF Transceiver is in Transceiver OFF state PHY_RX_ON Transceiver is in Receiver ON state PHY_TX_ON Transceiver is in Transmit ON state PHY_BUSY_RX Transceiver is currently receiving the packet PHY_BUSY_TX Transceiver is currently transmitting the packet PHY_TRX_SLEEP Transceiver is in sleep state PHY_TRX_DEEP_SLEEP Transceiver is in Deep sleep state ",
							" Remarks None ",
							" PHY_TrxState_t Enum ",
							" C typedef enum phy_trx_state_tag{ /* Transceiver to be configured to Transceiver OFF state*/ PHY_STATE_TRX_OFF /* Transceiver to be configured to Receiver ON state */ PHY_STATE_RX_ON }PHY_TrxState_t; ",
							" Summary Enumeration for Transceiver States that can be set/configured ",
							" Description State Description PHY_STATE_TRX_OFF Configures the transceiver to TRX_OFF state PHY_STATE_RX_ON Configures the transceiver to RX_ON state ",
							" Remarks Once the tranceiver state is set to RX_ON it will stay in receive mode after each reception and transmission User has to configure the TRX to change the state to TRX_OFF if needed ",
							" PHY_SleepMode_t Enum ",
							" C typedef enum sleep_mode_tag { SLEEP_MODE_1 DEEP_SLEEP_MODE } PHY_SleepMode_t; ",
							" Summary Sleep Modes supported by transceiver ",
							" Description List of sleep modes supported by the transceiver If TRX is set to SLEEP_MODE_1 the TRX register contents are retained If TRX is set to DEEP_SLEEP_Mode state the register contents are cleared mode Description SLEEP_MODE_1 Normal Sleep mode of transeiver - With this mode thr TRX register values are retained after wakeup DEEP_SLEEP_MODE Deep sleep mode - With this mode the register values are reset to default ",
							" Remarks None ",
							" PHY_Retval_t Enum ",
							" C typedef enum phy_return_value_tag { /* General Success condition*/ PHY_SUCCESS = 0x00 /* Transceiver is currently sleeping */ PHY_TRX_ASLEEP = 0x81 /* Transceiver is currently awake */ PHY_TRX_AWAKE = 0x82 /* 15 4 subsytem request is aborted due to BT subsystem High priority request */ PHY_RF_REQ_ABORTED = 0x83 /* RF is not available for 802 15 4 subsytem*/ PHY_RF_UNAVAILABLE = 0x84 /* General failure condition */ PHY_FAILURE = 0x85 /* PHY busy condition */ PHY_BUSY = 0x86 /* Frame pending at receiver */ PHY_FRAME_PENDING = 0x87 /*A parameter in the set/get request is either not supported or is out ofthe valid range*/ PHY_INVALID_PARAMETER = 0x88 /*A SET/GET request was issued with the identifier of a PIB attribute that is not supported */ PHY_UNSUPPORTED_ATTRIBUTE = 0x89 /* The CCA attempt has detected a busy channel */ PHY_CHANNEL_BUSY = 0x8A /* The CCA attempt has detected an idle channel */ PHY_CHANNEL_IDLE = 0x8B /* TRX received no ack for the previously sent packet*/ PHY_NO_ACK = 0x8C /* Transmit is failed due to Channel access failure*/ PHY_CHANNEL_ACCESS_FAILURE = 0x8D }PHY_Retval_t; ",
							" Summary List of return status for the PHY functions ",
							" Description Status Description PHY_SUCCESS General Success condition PHY_TRX_ASLEEP Transceiver is currently sleeping PHY_TRX_AWAKE Transceiver is currently awake PHY_RF_REQ_ABORTED 15 4 subsytem request is aborted due to BT subsystem High priority request PHY_RF_UNAVAILABLE RF is not available for 802 15 4 subsytem PHY_FAILURE General failure condition PHY_BUSY PHY busy condition-Processing previous request PHY_FRAME_PENDING Frame pending at the receiver PHY_INVALID_PARAMETER A parameter in the set/get request is either not supported or is out ofthe valid range PHY_UNSUPPORTED_ATTRIBUTE A SET/GET request was issued with the identifier of a PIB attribute that is not supported PHY_CHANNEL_BUSY The CCA attempt has detected a busy channel PHY_CHANNEL_IDLE The CCA attempt has detected an idle channel PHY_NO_ACK TRX received no ack for the previously sent packet PHY_CHANNEL_ACCESS_FAILURE Transmit is failed due to Channel access failure ",
							" Remarks None ",
							" PHY_CSMAMode_t Enum ",
							" C typedef enum csma_mode_tag { NO_CSMA_NO_IFS NO_CSMA_WITH_IFS CSMA_UNSLOTTED CSMA_SLOTTED } PHY_CSMAMode_t; ",
							" Summary List of carrier sense multiple access with collision avoidance supported by PHY Layer ",
							" Description When Transmit function is called with PHYCSMAMode of NO_CSMA_NO_IFS - Immediate Tx and SIFS(Short InterFrameSpacing) between subsequent frames NO_CSMA_WITH_IFS - Immediate Tx and LIFS (Long InterFrameSpacing) between subsequent frames CSMA_UNSLOTTED - Hardware CSMA will be performed before packet transmission with number of retries configured CSMA_SLOTTED - Hardware CSMA will be performed - Used with Beacon Enabled network - Currently not supported by PHY ",
							" Remarks None ",
							" PHY_ContinuousTxMode_t Enum ",
							" C typedef enum continuous_tx_mode_tag { /* Continuous Wave mode to transmit * the signal at Fc + - 0 5MHz frequency */ CW_MODE = 0 /* PRBS mode to Pseudorandom Binary Sequence frame continuously */ PRBS_MODE = 1 } PHY_ContinuousTxMode_t; ",
							" Summary List of Continuous Transmission Test Modes supported by transceiver ",
							" Description CW_MODE - Continuous Wave mode to transmit the signal at Fc + - 0 5MHz frequency PRBS_MODE - PRBS mode to Pseudorandom Binary Sequence frame continuously ",
							" Remarks None ",
							" PHY_ConfigParam_t Enum ",
							" C typedef enum param_tag { /** Antenna Diversity */ ANT_DIVERSITY = 0x00 /** Antenna Configured - ANTENNA_1/ANTENNA_2*/ ANT_SELECT = 0x01 /** Antenna Control */ ANT_CTRL = 0x02 /** Promiscuous Mode*/ AACK_PROMSCS_MODE = 0x03 /** Tx Power Configured*/ TX_PWR = 0x06 /** Rx Sensitivity*/ RX_SENS = 0x07 /** RX Reduced Power Consumption*/ RX_RPC = 0x08 /** Automatic acknowledgement*/ RX_AUTO_ACK = 0x0A /** Reserved frame reception*/ RX_RESERVED_FRAME = 0x0B /** Filter reserved frame*/ FILTER_RESERVED_FRAME = 0x0C }PHY_ConfigParam_t; ",
							" Summary PHY Configuration parameters supported by transceiver ",
							" Description Following are the list of configuration parameters which can be read from the transceiver | Param | Description | |:------|:------------| |ANT_DIVERSITY|Antenna Diversity| |ANT_SELECT|Antenna Configured - ANTENNA_1/ANTENNA_2| |ANT_CTRL|Antenna Control| |AACK_PROMSCS_MODE|Promiscuous Mode| |TX_PWR|Tx Power Configured| |RX_SENS|Rx Sensitivity| |RX_RPC|RX Reduced Power Consumption| |RX_AUTO_ACK|Automatic acknowledgement| |RX_RESERVED_FRAME|Reserved frame reception| |FILTER_RESERVED_FRAME|Filter reserved frame| ",
							" Remarks None ",
							" Platform Abstraction Layer  The platform abstraction Layer contains the wrapper functions which provide the seamless interface between the MAC/PHY software to PAL modules  PAL provide interface for following components   PALTimer services for software timers and delay routines  Access to persistent storage(for example Flash NVM or EEPROM)  NVIC module for enabling/disabling the RF and Arbiter interrupts   ",
							" PAL Timer  The Timer module provides the physical device implementation for software timers PAL Timer module in turn use the SYS_TIME driver available in Harmony 3  PAL Timer module implements the timer array to hold the following details of each software timer    Timer Handler (SYS Timer Handle)  Timer ID  Callback function  Callback parameter    PAL Timer module provides the following API interface to use the timing functions    PAL Timer APIs        S No  Function  Description      1  PAL_Init  Initialization of PAL    2  PAL_TimerGetId  Gets the timer Id    3   PAL_TimerStart  This function starts a regular timer and installs the corresponding callback function handle the timeout event    4  PAL_TimerStop  Stops the running timer    5  PAL_GetCurrentTime  Gets the current time    6  PAL_TimerIsRunning  Returs the timer status    7  PAL_TimerDelay  Routine to introduce blocking delay       ",
							" PAL_GetCurrentTime Function ",
							" C uint32_t PAL_GetCurrentTime( void ) ",
							" Summary Gets current time ",
							" Description This function returns the current time ",
							" Precondition None ",
							" Parameters None ",
							" Returns Returns the current time ",
							" Example uint32_t currTime ; currTime = PAL_GetCurrentTimer(); return currTime; ",
							" Remarks None ",
							" PAL_Init Function ",
							" C PAL_Status_t PAL_Init(void) ",
							" Summary Initialization of PAL ",
							" Description This function initializes the timers array and initializes the PAL layer variables ",
							" Precondition SYS_TIME_Initialize() should have been called before calling this function ",
							" Parameters None ",
							" Returns PAL_SUCCESS - if PAL initialization is successful PAL_FAILURE - otherwise ",
							" Example PAL_Status_t retVal = PAL_FAILURE; retVal = PAL_Init(); if (PAL_SUCCESS = retVal) { while(1); } ",
							" Remarks This routine is called by the PHY layer during initialization So user can directly uses PAL APIs ",
							" PAL_TimerGetId Function ",
							" C PAL_Status_t PAL_TimerGetId(TimerId_t *timer_id) ",
							" Summary Gets the Timer Id ",
							" Description Returns a timer id to be used before starting a timer ",
							" Precondition PAL_Init() should have been called before calling this function ",
							" Parameters Param Description timer_id Value of the id returned by the function ",
							" Returns PAL_SUCCESS - If there is a unused timer PAL_FAILURE - If there are no timer unused ",
							" Example TimerId_t appTimer; //Get the Id for the sotware timer instance PAL_TimerGetId( appTimer); ",
							" Remarks None ",
							" PAL_TimerDelay Function ",
							" C void PAL_TimerDelay(uint32_t delay) ",
							" Summary Routine to introduce blocking delay ",
							" Description This function is used to create the blocking delay in us ",
							" Precondition None ",
							" Parameters Param Description delay Blocking delay value in microseconds ",
							" Returns None ",
							" Example uint32_t delayUs = 5000; RGB_GREEN_LED_ON(); PAL_TimerDelay(delayUs); RGB_GREEN_LED_OFF(); ",
							" Remarks None ",
							" PAL_TimerIsRunning Function ",
							" C bool PAL_TimerIsRunning(TimerId_t timer_id) ",
							" Summary Gets the status of running timer ",
							" Description Checks if the timer of requested timer identifier is running ",
							" Precondition Timer should have been started before using this function ",
							" Parameters Param Description timer_id Timer identifier ",
							" Returns bool - true false otherwise ",
							" Example PAL_Status_t retVal = PAL_FAILURE; TimerId_t appTimer; bool IsTimerRunning = false; static void AppTimerCallback(void *paramCb) { //Toggle LED } //Get the Id for the sotware timer instance PAL_TimerGetId( appTimer); if (PAL_SUCCESS == PAL_TimerStart(appTimer 5000 TIMEOUT_RELATIVE (void *)AppTimerCallback NULL CALLBACK_SINGLE)) { //Timer Started //ToggleLED } IsTimerRunning = PAL_TimerIsRunning(appTimer); if(IsTimerRunning) { //Timer is running } ",
							" Remarks None ",
							" PAL_TimerStart Function ",
							" C PAL_Status_t PAL_TimerStart(TimerId_t timerId uint32_t timerCount TimeoutType_t timeoutType void * timerCb void *paramCb CallbackType_t callbackType) ",
							" Summary Start regular timer ",
							" Description This function starts a regular timer and installs the corresponding callback function handle the timeout event ",
							" Precondition PAL_Init() should have been called before calling this function PAL_TimerGetId() routine should be called to get the timer Id before starting it ",
							" Parameters Param Description timerId Timer identifier timerCount Timeout in microseconds timeoutType TIMEOUT_RELATIVE or @ref TIMEOUT_ABSOLUTE timerCb Callback handler invoked upon timer expiry paramCb Argument for the callback handler callbackType CALLBACK_SINGLE or @ref CALLBACK_PERIODIC ",
							" Returns PAL_TMR_INVALID_ID - if the timer identifier is undefined PAL_INVALID_PARAMETER - if the callback function for this timer is NULL PAL_TMR_ALREADY_RUNNING - if the timer is already running PAL_SUCCESS - if timer is started or PAL_TMR_INVALID_TIMEOUT - if timeout is not within timeout ",
							" Example PAL_Status_t retVal = PAL_FAILURE; TimerId_t appTimer; static void AppTimerCallback(void *paramCb) { //Toggle LED } //Get the Id for the sotware timer instance PAL_TimerGetId( appTimer); if (PAL_SUCCESS == PAL_TimerStart(appTimer 5000 TIMEOUT_RELATIVE (void *)AppTimerCallback NULL CALLBACK_SINGLE)) { //Timer Started //ToggleLED } ",
							" Remarks Starting PAL_Timer before getting the Id of timer will lead to unpredicted behaviour ",
							" PAL_TimerStop Function ",
							" C PAL_Status_t PAL_TimerStop(TimerId_t timerId) ",
							" Summary Stops a running timer ",
							" Description This function stops a running timer with specified timer_id ",
							" Precondition Timer should have been started before using this function ",
							" Parameters timerId - Timer identifier ",
							" Returns PAL_TMR_INVALID_ID - if the timer identifier is undefined PAL_SUCCESS - if timer is stopped successfully ",
							" Example PAL_Status_t retVal = PAL_FAILURE; TimerId_t appTimer; static void AppTimerCallback(void *paramCb) { //Toggle LED } //Get the Id for the sotware timer instance PAL_TimerGetId( appTimer); if (PAL_SUCCESS == PAL_TimerStart(appTimer 5000 TIMEOUT_RELATIVE (void *)AppTimerCallback NULL CALLBACK_SINGLE)) { //Timer Started //ToggleLED } if (PAL_SUCCESS == PAL_TimerStop(appTimer)) { //Timer Stopped //ToggleLED } ",
							" Remarks Timer should be started before stopping it ",
							" PAL Timer Configuration SYS TIME Module Configuration for PAL Timer  SYS TIME module is configured in the TICK-LESS mode for PAL Timer usage Tick-less mode: Instead of getting interrupted from the hardware timer periodically the Time System Service manages the hardware timer so as to generate an interrupt only when required and at appropriate times  The PLIB used for SYS Time module can be changed to any other Timer instance Timer configuration is shown below   ",
							" Resource Management  The Resource management provides access to the resources to the stack or the application The resources are   Buffer Management Module  Queue Management Module   ",
							" Buffer Management Module  Buffer management module provides services for dynamically allocating and freeing the memory buffers  There are two types of buffers which can be allocated by application or any stack layers   LARGE BUFFER  SMALL BUFFER   The size of buffers can be configured by the layer which are using the service For Example PHY Layer uses the Large buffer for holding the received packet So the size of LARGE BUFFER is calculated as follows  #define LARGE_BUFFER_SIZE (((sizeof(PHY_FrameInfo_t) + aMaxPHYPacketSize +  LENGTH_FIELD_LEN + LQI_LEN + ED_VAL_LEN) / 4 + 1) * 4)   Number of buffers used by the application or stack layer also a configurable one  #define NUMBER_OF_LARGE_BUFFERS 10  Both buffer size and number of buffers decides the buffer pool area where the allocation and freeing will happen   Following are the list of interface functions of Buffer Management Module    BMM APIs        S No  Function  Description      1  bmm_buffer_init  Initializes the buffer module    2  bmm_buffer_alloc  Allocates a buffer    3  bmm_buffer_free  Frees up a buffer       ",
							" bmm_buffer_init Function ",
							" C void bmm_buffer_init(void) ",
							" Summary Initializes the buffer module ",
							" Description This function initializes the buffer module This function should be called before using any other functionality of buffer module ",
							" Precondition None ",
							" Parameters None ",
							" Returns None ",
							" Example bmm_buffer_init(); ",
							" Remarks This routine is called by the PHY Layer during PHY Initialization (PHY_Init) Application can directly allocate the buffer and use it Number of Buffers should be defined as per application needs before ausing the buffer ",
							" bmm_buffer_alloc Function ",
							" C buffer_t* bmm_buffer_alloc(uint16_t size) ",
							" Summary Allocates a buffer ",
							" Description This function allocates a buffer and returns a pointer to the buffer The same pointer should be used while freeing the buffer User should call BMM_BUFFER_POINTER(buf) to get the pointer to buffer user area ",
							" Precondition bmm_buffer_init should have been called before using this function ",
							" Parameters Param Description size size of buffer to be allocated ",
							" Returns return- pointer to the buffer allocated NULL if buffer not available ",
							" Example buffer_t *buffer; buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE); if (buffer == NULL) { //Buffer is unavailable } ",
							" Remarks This routine is used by the PHY Layer for allocating the buffer for reception Number of Buffers should be defined as per application needs before the buffer allocation function If application allocates the buffer and not freeing them Trx may not able to continuously receive the packet So care should be taken when defining the Number of Buffers ",
							" bmm_buffer_free Function ",
							" C void bmm_buffer_free(buffer_t *pbuffer) ",
							" Summary Frees up a buffer ",
							" Description This function frees up a buffer The pointer passed to this function should be the pointer returned during buffer allocation The result is unpredictable if an incorrect pointer is passed ",
							" Precondition bmm_buffer_init should have been called before using this function ",
							" Parameters Param Description pbuffer Pointer to buffer that has to be freed ",
							" Returns None ",
							" Example buffer_t *buffer; buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE); if (buffer = NULL) { //Use the buffer } //Buffer Freeing bmm_buffer_free(buffer); ",
							" Remarks This routine is used by the PHY Layer for allocating the buffer for reception Number of Buffers should be defined as per application needs before the buffer allocation function If application allocates the buffer and not freeing them Trx may not able to continuously receive the packet So care should be taken when defining the Number of Buffers ",
							" Queue Management Module  Queue Management module provides services for creating and maintaining the queues  PHY Layer uses queue module for queuing the incoming packets  Following are the QMM layer interface APIs  QMM APIs        S No  Function  Description      1  qmm_queue_init  Initializes the queue    2  qmm_queue_append  Appends a buffer into the queue    3  qmm_queue_read  Reads a buffer from queue    4  qmm_queue_remove  Removes a buffer from queue    5  qmm_queue_flush  Internal function for flushing a specific queue      ",
							" qmm_queue_init Function ",
							" C void qmm_queue_init(queue_t *q uint8_t capacity) ",
							" Summary Initializes the queue ",
							" Description This function initializes the queue Note that this function should be called before invoking any other functionality of QMM ",
							" Precondition None ",
							" Parameters Param Description q The queue which should be initialized capacity Queue length (Max No of buffers which can be accomodated in the queue) ",
							" Returns None ",
							" Example queue_t app_queue; uint8_t queue_size = 10; qmm_queue_init( app_queue queue_size); ",
							" Remarks None ",
							" qmm_queue_append Function ",
							" C qmm_status_t qmm_queue_append(queue_t *q buffer_t *buf) ",
							" Summary Appends a buffer into the queue ",
							" Description This function appends a buffer into the designated queue ",
							" Precondition qmm_queue_init should have called for initilazing the particular queue before using it ",
							" Parameters Param Description q Queue into which buffer should be appended buf Pointer to the buffer that should be appended into the queue Note that this pointer should be same as the pointer returned by bmm_buffer_alloc ",
							" Returns QUEUE_SUCCESS - Buffer gets appended successfully QUEUE_FULL - Designated queue is full ",
							" Example queue_t app_queue; buffer_t *app_buf; // Allocate the buffer app_buf = bmm_buffer_alloc(LARGE_BUFFER_SIZE); uint8_t queue_size = 10; qmm_queue_init( app_queue queue_size); // Append buffer in queue qmm_queue_append( app_queue app_buf); ",
							" Remarks None ",
							" qmm_queue_read Function ",
							" C buffer_t* qmm_queue_read(queue_t *q search_t *search) ",
							" Summary Reads a buffer from queue ",
							" Description This function reads either the first buffer if search is NULL or buffer matching the given criteria from queue ",
							" Precondition qmm_queue_init should have called for initilazing the particular queue before using it and buffer should be appended before reading it ",
							" Parameters Param Description q Queue from which buffer should be read search Search criteria If this parameter is NULL first buffer in the queue will be read Otherwise buffer matching the criteria will be read ",
							" Returns return - Pointer to the buffer header if the buffer is successfully read NULL otherwise ",
							" Example queue_t app_queue; buffer_t *app_buf; // Allocate the buffer app_buf = bmm_buffer_alloc(LARGE_BUFFER_SIZE); uint8_t queue_size = 10; qmm_queue_init( app_queue queue_size); // Append buffer in queue qmm_queue_append( app_queue app_buf); //Read buffer from queue app_buf = qmm_queue_read( app_queue NULL); ",
							" Remarks None ",
							" qmm_queue_remove Function ",
							" C buffer_t* qmm_queue_remove(queue_t *q search_t *search) ",
							" Summary Removes a buffer from queue ",
							" Description This function removes a buffer from queue ",
							" Precondition qmm_queue_init should have called for initilazing the particular queue before using it and buffer should be appended before removing it ",
							" Parameters Param Description q Queue from which buffer should be removed search Search criteria If this parameter is NULL first buffer in the queue will be removed Otherwise buffer matching the criteria will be removed ",
							" Returns return - Pointer to the buffer header if the buffer is successfully removed NULL otherwise ",
							" Example queue_t app_queue; buffer_t *app_buf; // Allocate the buffer app_buf = bmm_buffer_alloc(LARGE_BUFFER_SIZE); uint8_t queue_size = 10; qmm_queue_init( app_queue queue_size); // Append buffer in queue qmm_queue_append( app_queue app_buf); //Remove buffer from queue app_buf = qmm_queue_remove( app_queue NULL); ",
							" Remarks None ",
							" qmm_queue_flush Function ",
							" C void qmm_queue_flush(queue_t *q) ",
							" Summary Internal function for flushing a specific queue ",
							" Description This function flushes the entire queue ",
							" Precondition qmm_queue_init should have called for initilazing the particular queue before using it ",
							" Parameters q - Queue to be flushed ",
							" Returns None ",
							" Example queue_t app_queue; buffer_t *app_buf; // Allocate the buffer app_buf = bmm_buffer_alloc(LARGE_BUFFER_SIZE); uint8_t queue_size = 10; qmm_queue_init( app_queue queue_size); qmm_queue_flush( app_queue); ",
							" Remarks None ",
							" Microchip Information ",
							" The Microchip Website  Microchip provides online support via our website at This website is used to make files and information easily available to customers Some of the content available includes:   Product Support – Data sheets and errata application notes and sample programs design resources user’s guides and hardware support documents latest software releases and archived software  General Technical Support – Frequently Asked Questions (FAQs) technical support requests online discussion groups Microchip design partner program member listing  Business of Microchip – Product selector and ordering guides latest Microchip press releases listing of seminars and events listings of Microchip sales offices distributors and factory representatives   ",
							" Product Change Notification Service  Microchip’s product change notification service helps keep customers current on Microchip products Subscribers will receive email notification whenever there are changes updates revisions or errata related to a specified product family or development tool of interest  To register go to and follow the registration instructions  ",
							" Customer Support  Users of Microchip products can receive assistance through several channels:   Distributor or Representative  Local Sales Office  Embedded Solutions Engineer (ESE)  Technical Support   Customers should contact their distributor representative or ESE for support Local sales offices are also available to help customers A listing of sales offices and locations is included in this document  Technical support is available through the website at:  ",
							" Microchip Devices Code Protection Feature  Note the following details of the code protection feature on Microchip products:   Microchip products meet the specifications contained in their particular Microchip Data Sheet  Microchip believes that its family of products is secure when used in the intended manner within operating specifications and under normal conditions  Microchip values and aggressively protects its intellectual property rights Attempts to breach the code protection features of Microchip product is strictly prohibited and may violate the Digital Millennium Copyright Act  Neither Microchip nor any other semiconductor manufacturer can guarantee the security of its code Code protection does not mean that we are guaranteeing the product is “unbreakable” Code protection is constantly evolving Microchip is committed to continuously improving the code protection features of our products   ",
							" Legal Notice  This publication and the information herein may be used only with Microchip products including to design test and integrate Microchip products with your application Use of this information in any other manner violates these terms Information regarding device applications is provided only for your convenience and may be superseded by updates It is your responsibility to ensure that your application meets with your specifications Contact your local Microchip sales office for additional support or obtain additional support at   THIS INFORMATION IS PROVIDED BY MICROCHIP \"AS IS\" MICROCHIP MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND WHETHER EXPRESS OR IMPLIED WRITTEN OR ORAL STATUTORY OR OTHERWISE RELATED TO THE INFORMATION INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE OR WARRANTIES RELATED TO ITS CONDITION QUALITY OR PERFORMANCE  IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT SPECIAL PUNITIVE INCIDENTAL OR CONSEQUENTIAL LOSS DAMAGE COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE INFORMATION OR ITS USE HOWEVER CAUSED EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE TO THE FULLEST EXTENT ALLOWED BY LAW MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY RELATED TO THE INFORMATION OR ITS USE WILL NOT EXCEED THE AMOUNT OF FEES IF ANY THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THE INFORMATION  Use of Microchip devices in life support and/or safety applications is entirely at the buyer's risk and the buyer agrees to defend indemnify and hold harmless Microchip from any and all damages claims suits or expenses resulting from such use No licenses are conveyed implicitly or otherwise under any Microchip intellectual property rights unless otherwise stated  ",
							" Trademarks  The Microchip name and logo the Microchip logo Adaptec AVR AVR logo AVR Freaks BesTime BitCloud CryptoMemory CryptoRF dsPIC flexPWR HELDO IGLOO JukeBlox KeeLoq Kleer LANCheck LinkMD maXStylus maXTouch MediaLB megaAVR Microsemi Microsemi logo MOST MOST logo MPLAB OptoLyzer PIC picoPower PICSTART PIC32 logo PolarFire Prochip Designer QTouch SAM-BA SenGenuity SpyNIC SST SST Logo SuperFlash Symmetricom SyncServer Tachyon TimeSource tinyAVR UNI/O Vectron and XMEGA are registered trademarks of Microchip Technology Incorporated in the U S A and other countries  AgileSwitch APT ClockWorks The Embedded Control Solutions Company EtherSynch Flashtec Hyper Speed Control HyperLight Load Libero motorBench mTouch Powermite 3 Precision Edge ProASIC ProASIC Plus ProASIC Plus logo Quiet- Wire SmartFusion SyncWorld Temux TimeCesium TimeHub TimePictra TimeProvider TrueTime and ZL are registered trademarks of Microchip Technology Incorporated in the U S A  Adjacent Key Suppression AKS Analog-for-the-Digital Age Any Capacitor AnyIn AnyOut Augmented Switching BlueSky BodyCom Clockstudio CodeGuard CryptoAuthentication CryptoAutomotive CryptoCompanion CryptoController dsPICDEM dsPICDEM net Dynamic Average Matching DAM ECAN Espresso T1S EtherGREEN GridTime IdealBridge In-Circuit Serial Programming ICSP INICnet Intelligent Paralleling IntelliMOS Inter-Chip Connectivity JitterBlocker Knob-on-Display KoD maxCrypto maxView memBrain Mindi MiWi MPASM MPF MPLAB Certified logo MPLIB MPLINK MultiTRAK NetDetach Omniscient Code Generation PICDEM PICDEM net PICkit PICtail PowerSmart PureSilicon QMatrix REAL ICE Ripple Blocker RTAX RTG4 SAM-ICE Serial Quad I/O simpleMAP SimpliPHY SmartBuffer SmartHLS SMART-I S storClad SQI SuperSwitcher SuperSwitcher II Switchtec SynchroPHY Total Endurance Trusted Time TSHARC USBCheck VariSense VectorBlox VeriPHY ViewSpan WiperLock XpressConnect and ZENA are trademarks of Microchip Technology Incorporated in the U S A and other countries  SQTP is a service mark of Microchip Technology Incorporated in the U S A  The Adaptec logo Frequency on Demand Silicon Storage Technology and Symmcom are registered trademarks of Microchip Technology Inc in other countries  GestIC is a registered trademark of Microchip Technology Germany II GmbH Co KG a subsidiary of Microchip Technology Inc in other countries  All other trademarks mentioned herein are property of their respective companies  © Microchip Technology Incorporated and its subsidiaries All Rights Reserved  ISBN:  ",
							" Quality Management System   For information regarding Microchip’s Quality Management Systems please visit    ",
							" Worldwide Sales and Service          AMERICAS  ASIA/PACIFIC  ASIA/PACIFIC  EUROPE       Corporate Office  2355 West Chandler Blvd  Chandler AZ 85224-6199  Tel: 480-792-7200  Fax: 480-792-7277  Technical Support:   Web Address:   Atlanta  Duluth GA  Tel: 678-957-9614  Fax: 678-957-1455  Austin TX  Tel: 512-257-3370  Boston  Westborough MA  Tel: 774-760-0087  Fax: 774-760-0088  Chicago  Itasca IL  Tel: 630-285-0071  Fax: 630-285-0075  Dallas  Addison TX  Tel: 972-818-7423  Fax: 972-818-2924  Detroit  Novi MI  Tel: 248-848-4000  Houston TX  Tel: 281-894-5983  Indianapolis  Noblesville IN  Tel: 317-773-8323  Fax: 317-773-5453  Tel: 317-536-2380  Los Angeles  Mission Viejo CA  Tel: 949-462-9523  Fax: 949-462-9608  Tel: 951-273-7800  Raleigh NC  Tel: 919-844-7510  New York NY  Tel: 631-435-6000  San Jose CA  Tel: 408-735-9110  Tel: 408-436-4270  Canada - Toronto  Tel: 905-695-1980  Fax: 905-695-2078    Australia - Sydney  Tel: 61-2-9868-6733  China - Beijing  Tel: 86-10-8569-7000  China - Chengdu  Tel: 86-28-8665-5511  China - Chongqing  Tel: 86-23-8980-9588  China - Dongguan  Tel: 86-769-8702-9880  China - Guangzhou  Tel: 86-20-8755-8029  China - Hangzhou  Tel: 86-571-8792-8115  China - Hong Kong SAR  Tel: 852-2943-5100  China - Nanjing  Tel: 86-25-8473-2460  China - Qingdao  Tel: 86-532-8502-7355  China - Shanghai  Tel: 86-21-3326-8000  China - Shenyang  Tel: 86-24-2334-2829  China - Shenzhen  Tel: 86-755-8864-2200  China - Suzhou  Tel: 86-186-6233-1526  China - Wuhan  Tel: 86-27-5980-5300  China - Xian  Tel: 86-29-8833-7252  China - Xiamen  Tel: 86-592-2388138  China - Zhuhai  Tel: 86-756-3210040    India - Bangalore  Tel: 91-80-3090-4444  India - New Delhi  Tel: 91-11-4160-8631  India - Pune  Tel: 91-20-4121-0141  Japan - Osaka  Tel: 81-6-6152-7160  Japan - Tokyo  Tel: 81-3-6880- 3770  Korea - Daegu  Tel: 82-53-744-4301  Korea - Seoul  Tel: 82-2-554-7200  Malaysia - Kuala Lumpur  Tel: 60-3-7651-7906  Malaysia - Penang  Tel: 60-4-227-8870  Philippines - Manila  Tel: 63-2-634-9065  Singapore  Tel: 65-6334-8870  Taiwan - Hsin Chu  Tel: 886-3-577-8366  Taiwan - Kaohsiung  Tel: 886-7-213-7830  Taiwan - Taipei  Tel: 886-2-2508-8600  Thailand - Bangkok  Tel: 66-2-694-1351  Vietnam - Ho Chi Minh  Tel: 84-28-5448-2100    Austria - Wels  Tel: 43-7242-2244-39  Fax: 43-7242-2244-393  Denmark - Copenhagen  Tel: 45-4485-5910  Fax: 45-4485-2829  Finland - Espoo  Tel: 358-9-4520-820  France - Paris  Tel: 33-1-69-53-63-20  Fax: 33-1-69-30-90-79  Germany - Garching  Tel: 49-8931-9700  Germany - Haan  Tel: 49-2129-3766400  Germany - Heilbronn  Tel: 49-7131-72400  Germany - Karlsruhe  Tel: 49-721-625370  Germany - Munich  Tel: 49-89-627-144-0  Fax: 49-89-627-144-44  Germany - Rosenheim  Tel: 49-8031-354-560  Israel - Ra’anana  Tel: 972-9-744-7705  Italy - Milan  Tel: 39-0331-742611  Fax: 39-0331-466781  Italy - Padova  Tel: 39-049-7625286  Netherlands - Drunen  Tel: 31-416-690399  Fax: 31-416-690340  Norway - Trondheim  Tel: 47-72884388  Poland - Warsaw  Tel: 48-22-3325737  Romania - Bucharest  Tel: 40-21-407-87-50  Spain - Madrid  Tel: 34-91-708-08-90  Fax: 34-91-708-08-91  Sweden - Gothenberg  Tel: 46-31-704-60-40  Sweden - Stockholm  Tel: 46-8-5090-4654  UK - Wokingham  Tel: 44-118-921-5800  Fax: 44-118-921-5820       "];

